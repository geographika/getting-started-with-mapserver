{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the Getting Started with MapServer workshop!","text":"<p>Version: 1.0</p> <p></p> <p>MapServer is an Open Source platform for publishing spatial data and interactive mapping applications to the web.  Originally developed in the mid-1990\u2019s at the University of Minnesota, MapServer is released under an MIT-style license, and runs on all  major platforms (Windows, Linux, Mac). </p> <p>Getting Started with MapServer is a half day workshop designed for users to become familiar with MapServer.  This workshop will cover creating Mapfiles, working with data sources and publishing geospatial data to the web using OGC API standards. Please see the left hand navigation for the table of contents.</p>"},{"location":"#about-this-tutorial","title":"About this tutorial","text":"<p>This tutorial is a combination of step-by-step explanations of various aspects of MapServer as well as a series of exercises to  familiarize yourself with the project.</p> <p>Exercises are indicated as follows:</p> <p>Example exercise</p> <p>A section marked like this indicates that you can try out the exercise.</p> <p>Also you will notice tips and notes sections within the text:</p> <p>Tip</p> <p>Tips share additional help on how to best achieve tasks</p> <p>Examples are indicated as follows:</p> <p>Code <pre><code>MAP\n    NAME \"Points\"\n    EXTENT 26.668678 58.339241 26.796582 58.40941\n    UNITS DD\n    SIZE 800 600\n</code></pre></p>"},{"location":"#workshop-location-and-materials","title":"Workshop location and materials","text":"<p>This workshop is provided live at https://geographika.github.io/getting-started-with-mapserver.</p> <p>The workshop contents, wiki and issue tracker are managed on GitHub at https://github.com/geographika/getting-started-with-mapserver.</p>"},{"location":"#support","title":"Support","text":"<p>For issues/bugs/suggestions or improvements/contributions, use the GitHub issue tracker.</p> <p>Bugs, enhancements and issues can be reported on GitHub.</p> <p>As always, core MapServer support and community information can be found on the MapServer website.</p> <p>Contributions are encouraged and welcome!</p>"},{"location":"#now-on-to-the-workshop-lets-go","title":"Now, on to the workshop.  Let's go!","text":""},{"location":"credits/","title":"Authors","text":"<ul> <li>Seth Girvin (found on GitHub at @geographika). Please get in touch if you'd like a particular topic added to the workshop, or require any MapServer development.</li> </ul>"},{"location":"credits/#thanks","title":"Thanks","text":"<p>Thanks to the following for helping this workshop to be created and improved:</p> <ul> <li>The workshop participants at FOSS4G Europe 2024 for their participation, feedback, and for having everything installed ready for a 9am start!</li> <li>Michael Smith for co-hosting the FOSS4G Europe 2024 workshop, and providing valuable tips and assistance.</li> <li>Colleagues at Compass Informatics for trialling the workshop and providing valuable feedback.</li> <li>The pygeoapi team - this workshop is based on the technology and approach used in the excellent   Diving into pygeoapi workshop.</li> <li>St\u00e9phane Brunner from Camptocamp   for maintaining the MapServer Docker images used in this workshop.</li> <li>Kartoza for maintaining the PostGIS Docker images</li> <li>Pericles S. Nacionales and Jeff McKenna   for the current MapServer Tutorial.</li> </ul>"},{"location":"setup/","title":"Workshop Environment Setup","text":"<p>In this workshop we use the following materials:</p> <ol> <li>Documentation - (like this page): the latest versions are available online here</li> <li>Exercises - download the latest zip file, unzip,     and find exercises in <code>workshop/exercises</code>.</li> </ol> <p>The first step is to download and unzip the <code>main.zip</code> file to a local folder on your system.  Alternatively, if you are familiar with <code>git</code> and have it installed you can fork/clone the GitHub repository of this  workshop directly from https://github.com/geographika/getting-started-with-mapserver/.</p>"},{"location":"setup/#text-editor","title":"Text editor","text":"<p>Your text editor needs to be able to edit files in plain text. Below are some choices for text editors (there may be others):</p> <ul> <li>Notepad or Notepad++ (Windows)</li> <li>Sublime Text</li> <li>IntelliJ IDEA</li> <li>Emacs</li> <li>Visual Studio Code</li> <li><code>vi</code> / <code>vim</code></li> </ul> <p>Having said this, please feel free to use what works for you :)</p>"},{"location":"setup/#docker","title":"Docker","text":"<p>The main requirement for the training is to install Docker with Docker Compose on your system. We strongly advise to install Docker before the workshop starts.</p> <p>MapServer can be installed directly to various operating systems (see the documentation for more information), but Docker is used so a fully reproducible environment can be setup.</p> <p>Docker Compose is an addition to Docker to facilitate the orchestration (configuration) of one or more Docker 'Containers' (a Container is a running instance of a Docker image) using a configuration convention (the Docker Compose YAML file), usually named <code>docker-compose.yml</code>.</p>"},{"location":"setup/#docker-installation","title":"Docker Installation","text":"<p>Docker installation has greatly progressed over the years. This is the only part of the workshop which is dependent on the system/OS you are running (e.g. Windows, Mac or Linux). For each system the Docker website provides detailed installation instructions. Please follow these consistently.</p> <p>For many platforms a product called <code>Docker Desktop</code> is available, which includes <code>Docker compose</code>:</p> <ul> <li>Windows installation - install \"Docker Desktop for Windows - x86_64\"</li> <li>Mac installation</li> <li>Linux installation</li> </ul> <p>Some installation notes for different operating systems:</p>"},{"location":"setup/#windows","title":"Windows","text":"<ul> <li>We recommend using the Windows Subsystem for Linux (WSL) as it also provides a powerful (Bash) command line and has optimal integration with Docker. You can choose this option when installing Docker:</li> </ul> <p>When you first run Docker you can then update to the latest WSL version:</p> <p></p> <ul> <li>If you get \"WSL update failed\" you may need to manually run <code>wsl --update</code></li> <li>Admin access is likely required to install Docker. You may then need to add your local account to the docker-users group as explained here, and restart your machine. </li> </ul>"},{"location":"setup/#mac","title":"Mac","text":"<ul> <li>If you are using Homebrew, consider using the brew Docker formula</li> </ul>"},{"location":"setup/#linux","title":"Linux","text":"<ul> <li>You can choose the relevant installer for your platform. You can also use Virtualbox with a Ubuntu image or use a cloud VM</li> <li>Docker Desktop includes a graphical user interface with some interesting options. You can see logs and information about running containers, open their service in a browser or even open a terminal inside the container</li> </ul>"},{"location":"setup/#osgeolive","title":"OSGeoLive","text":"<p>The steps below are based on Install Docker Engine on Ubuntu and have been tested on the OSGeoLive 16.0 virtual machine.</p> <pre><code># Add Docker's official GPG key:\nsudo apt-get update\nsudo apt-get install ca-certificates curl\nsudo install -m 0755 -d /etc/apt/keyrings\nsudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg -o /etc/apt/keyrings/docker.asc\nsudo chmod a+r /etc/apt/keyrings/docker.asc\n\n# Add the repository to Apt sources:\necho \\\n  \"deb [arch=$(dpkg --print-architecture) signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu \\\n  $(. /etc/os-release &amp;&amp; echo \"$VERSION_CODENAME\") stable\" | \\\n  sudo tee /etc/apt/sources.list.d/docker.list &gt; /dev/null\nsudo apt-get update\n\n# Install the Docker packages\nsudo apt-get install -y docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin\n\n# Test with Docker test image\nsudo service docker start\nsudo docker run hello-world\n\n# Setup the workshop\ncd /home\nsudo git clone https://github.com/geographika/getting-started-with-mapserver/\ncd /home/getting-started-with-mapserver/workshop/exercises/\nsudo docker compose up\n\n# Test the following URLs in a browser\n# http://localhost:7000\n# http://localhost:7001/lines.html\n</code></pre>"},{"location":"setup/#testing-the-docker-installation","title":"Testing the Docker installation","text":"<p>If all goes well, you should be able to run Docker from the command line as follows:</p> <pre><code>docker --version\n# Docker version 28.2.2, build e6534b4\n\ndocker compose version\n# Docker Compose version v2.36.2-desktop.1\n</code></pre> <p>Your version numbers don't have to match those above exactly.</p>"},{"location":"setup/#quickstart","title":"Quickstart","text":"<p>Once Docker is available on your system, running the workshop containers with MapServer and all required datasets is a one-liner. </p> <pre><code># make sure you are in the directory that contains docker-compose.yml\ncd /getting-started-with-mapserver/workshop/exercises/\n# now start the containers\ndocker compose up --detach\n</code></pre> <p>The first time this command is run it will start downloading the containers - this may take several minutes depending on your Internet connection. On Windows you may be prompted to let Docker access ports through your Windows Firewall. </p> <p>When this command is next run it should only take a few seconds to start. The <code>detach</code> flag means the containers will run in the background so we  can continue to use the shell. If you want to stop the containers you can run:</p> <pre><code>docker compose down\n</code></pre> <p>Once the containers are downloaded you can test they are running and you can connect to them. Open a web browser and navigate to http://localhost:7000/. You should see the following message:</p> <pre><code>loadParams(): Web application error. No query information to decode. QUERY_STRING is set, but empty.\n</code></pre> <p>This is good! It means MapServer is running. Next we can check that the front-end container is running by opening http://localhost:7001/points.html. Hopefully you'll see a map, and we're ready to start the workshop.</p>"},{"location":"setup/#possible-errors","title":"Possible Errors","text":"<ul> <li>The error <code>error during connect: this error may indicate that the docker daemon is not running</code> indicates that the Docker service isn't running. You will need to start Docker. On Windows you can do this by opening Docker Desktop. If it is still failing try running it as Administrator.</li> <li><code>docker: Cannot connect to the Docker daemon at unix:///var/run/docker.sock. Is the docker daemon running?</code> - the Docker service isn't running. Start it with <code>sudo service docker start</code>.</li> <li><code>E: Could not get lock /var/lib/dpkg/lock-frontend. It is held by process 46288 (unattended-upgr)</code> is caused by another program trying to update Ubuntu. Rebooting may fix this, or you can try running <code>sudo kill &lt;process_id&gt;</code> for example in this case <code>sudo kill 46288</code>. </li> <li><code>docker-desktop : Depends: docker-ce-cli but it is not installable</code> - you are attempting to install Docker Desktop, but have not yet installed the Docker Engine.</li> <li><code>unable to get image 'node:lts-slim': error during connect: in the default daemon configuration on Windows, the docker client must be     run with elevated privileges to connect: Get \"http://%2F%2F.%2Fpipe%2Fdocker_engine/v1.50/images/node:lts-slim/json\": open //./pipe/docker_engine: The system cannot find the file specified.</code></li> <li>you will need </li> </ul>"},{"location":"summary/","title":"Conclusion","text":"<p>We hope you enjoyed this workshop, and go on to become members of the MapServer community!</p>"},{"location":"summary/#next-steps","title":"Next Steps","text":"<ul> <li>Install MapServer or continue using the    MapServer Docker image used in the workshop.</li> <li>Browse the official MapServer Documentation.</li> </ul>"},{"location":"summary/#support","title":"Support","text":"<ul> <li>Join the MapServer Users Mailing List, and ask any questions you may have!</li> </ul>"},{"location":"summary/#useful-tools-and-sites","title":"Useful Tools and Sites","text":"<ul> <li>mappyfile is a Python library that can be used to create, parse, modify, and format MapServer Mapfiles.</li> <li>Mapfile Syntax for Visual Studio Code - syntax highlighting for Mapfiles</li> </ul>"},{"location":"summary/#further-reading","title":"Further Reading","text":"<p>Yearly summaries of developments in MapServer and the MapServer community can be found below:</p> <ul> <li>State of MapServer 2025</li> <li>State of MapServer 2024</li> <li>State of MapServer 2022</li> </ul>"},{"location":"tree/","title":"Tree","text":"<p>+---app |   +---css |   +---data |   +---dist |   |   +---assets |   |   ---data |   +---js +---data +---html +---mapfiles |   +---data |   |   +---fonts |   |   +---icons |   |   +---naturalearth |   |   +---osm |   |   ---raster |   ---resources |       ---fills ---scripts</p>"},{"location":"advanced/apache/","title":"MapServer and Apache","text":"<p>Warning</p> <p>This page is currently in a draft form.</p>"},{"location":"advanced/apache/#overview","title":"Overview","text":"<p>The Apache web server is used by the workshop Docker image. Since version 8.0 MapServer has a global config file.</p> <p>At its heart MapServer is a command-line application that can be accessed through a web server.</p> <p>https://github.com/camptocamp/docker-mapserver/blob/master/runtime/usr/local/bin/start-server</p> <p>Apache has a configuration file.</p> <p>mod_fcgid module, which is an Apache module that provides FastCGI support.</p> <pre><code>FcgidMaxRequestsPerProcess ${MAX_REQUESTS_PER_PROCESS}\nFcgidMinProcessesPerClass ${MIN_PROCESSES}\nFcgidMaxProcessesPerClass ${MAX_PROCESSES}\nFcgidBusyTimeout ${BUSY_TIMEOUT}\nFcgidIdleTimeout ${IDLE_TIMEOUT}\nFcgidIOTimeout ${IO_TIMEOUT}\n</code></pre> <p>These are all documented on the [reference page(https://httpd.apache.org/mod_fcgid/mod/mod_fcgid.html).</p> <p>These all have defaults in the Docker file, but can be overriden using environment variables.</p> <pre><code>ENV MS_DEBUGLEVEL=0 \\\n    MS_ERRORFILE=stderr \\\n    MAPSERVER_CONFIG_FILE=/etc/mapserver.conf \\\n    MAPSERVER_BASE_PATH= \\\n    MAX_REQUESTS_PER_PROCESS=1000 \\\n    MIN_PROCESSES=1 \\\n    MAX_PROCESSES=5 \\\n    BUSY_TIMEOUT=300 \\\n    IDLE_TIMEOUT=300 \\\n</code></pre> <p>All requests to the server are mapped to <code>mapserv_wrapper</code> - a small </p> <pre><code>ScriptAliasMatch \"^${MAPSERVER_BASE_PATH}/(.*)\" /usr/local/bin/mapserv_wrapper/$1\nScriptAliasMatch \"^${MAPSERVER_BASE_PATH}\" /usr/local/bin/mapserv_wrapper\n</code></pre> <p>Restarting Apache:</p> <pre><code>docker restart mapserver\n</code></pre>"},{"location":"advanced/apache/#other-web-servers","title":"Other Web Servers","text":"<ul> <li>IIS</li> </ul>"},{"location":"advanced/clusters/","title":"Clustered Data","text":"<p>MapServer can combine point features together into clusters based on their location, using the CLUSTER directive. </p> <p>In our example points representing trees are clustered together, with the number of points in each cluster used as the label.</p>"},{"location":"advanced/clusters/#mapfile-notes","title":"Mapfile Notes","text":"<p>The Mapfile contains a class for clustered features, and a class for non-clustered features. If there is no expression   in the <code>CLASS</code> then it will be applied to all features. A feature is checked against each <code>CLASS</code> until a match is found,   from first to last. If you want to add a \"catch-all\" <code>CLASS</code> then add it last in the Mapfile without an <code>EXPRESSION</code>.</p> <pre><code># class for clustered features\nCLASS\n    EXPRESSION (\"[Cluster_FeatureCount]\" != \"1\")\n    ...\nEND\n\n# add a class for non-clustered features\nCLASS\n    ...\n</code></pre>"},{"location":"advanced/clusters/#code","title":"Code","text":"<p>Example</p> <ul> <li>MapServer request: http://localhost:7000/?map=/etc/mapserver/clusters.map&amp;mode=map&amp;layer=trees</li> <li>OpenLayers example: http://localhost:7001/clusters.html</li> </ul> clusters.js <pre><code>import '../css/style.css';\nimport ImageWMS from 'ol/source/ImageWMS.js';\nimport Map from 'ol/Map.js';\nimport OSM from 'ol/source/OSM.js';\nimport View from 'ol/View.js';\nimport { Image as ImageLayer, Tile as TileLayer } from 'ol/layer.js';\n\nconst mapserverUrl = import.meta.env.VITE_MAPSERVER_BASE_URL;\nconst mapfilesPath = import.meta.env.VITE_MAPFILES_PATH;\n\nconst layers = [\n    new TileLayer({\n        source: new OSM(),\n    }),\n    new ImageLayer({\n        extent: [2968743.65508978, 8038921.67212233, 2982981.8632402, 8053818.05714347],\n        source: new ImageWMS({\n            url: mapserverUrl + mapfilesPath + 'clusters.map&amp;',\n            params: { 'LAYERS': 'trees', 'STYLES': '' },\n            ratio: 1\n        }),\n    }),\n];\nconst map = new Map({\n    layers: layers,\n    target: 'map',\n    view: new View({\n        center: [2975862.75916499, 8046369.8646329],\n        zoom: 14,\n    }),\n});\n</code></pre> clusters.map <pre><code>MAP\n    NAME \"Clusters\"\n    EXTENT 26.668678 58.339241 26.796582 58.40941\n    UNITS DD\n    SIZE 800 600\n    PROJECTION\n        \"init=epsg:4326\"\n    END\n    FONTSET \"data/fonts/fontset.txt\"\n    WEB\n        METADATA\n            \"ows_enable_request\" \"*\" \n            \"ows_srs\" \"EPSG:4326 EPSG:3857\" \n        END\n    END\n    SYMBOL\n        NAME \"circle\"\n        TYPE ELLIPSE\n        POINTS\n            1 1\n        END\n        FILLED TRUE\n    END\n    LAYER\n        NAME \"trees\"\n        STATUS OFF\n        TYPE POINT\n        CONNECTIONTYPE OGR \n        # cluster does not seem to work with the native FLATGEOBUF driver\n        # CONNECTIONTYPE FLATGEOBUF\n        # DATA \"data/osm/natural.fgb\"\n\n        CONNECTION \"data/osm/natural.fgb\"\n        CLUSTER\n            MAXDISTANCE 20\n            REGION \"ellipse\"\n        END\n\n        # LABELITEM \"Cluster_FeatureCount\"\n\n        # PROCESSING \"CLUSTER_ALGORITHM=SIMPLE\"\n        # PROCESSING \"CLUSTER_GET_ALL_SHAPES=OFF\"\n        # PROCESSING \"CLUSTER_KEEP_LOCATIONS=OFF\"\n\n        CLASSITEM \"Cluster_FeatureCount\"\n\n        # class for clustered features\n        CLASS\n            EXPRESSION (\"[Cluster_FeatureCount]\" != \"1\")\n            STYLE\n                SIZE 30\n                # In MapServer 8.2 we can use an expression for SIZE\n                # SIZE ([Cluster_FeatureCount] / 3)\n                SYMBOL \"circle\"\n                COLOR \"#4A993A\"\n            END\n            LABEL\n                FONT \"LiberationSans\"\n                TEXT \"[Cluster_FeatureCount]\"\n                TYPE TRUETYPE\n                SIZE 12\n                COLOR 255 255 255\n                ALIGN CENTER\n                FORCE TRUE # otherwise numbers can disappear\n            END\n        END\n\n        # add a class for non-clustered features\n        CLASS\n            STYLE\n                SIZE 20\n                SYMBOL \"circle\"\n                COLOR \"#4A993A\"\n            END\n            LABEL\n                FONT \"LiberationSans\"\n                TEXT \"1\"\n                TYPE TRUETYPE\n                SIZE 10\n                COLOR 255 255 255\n                ALIGN CENTER\n            END\n        END\n\n    END\nEND\n</code></pre>"},{"location":"advanced/clusters/#exercises","title":"Exercises","text":"<ol> <li> <p>Try changing the <code>MAXDISTANCE</code> and <code>REGION</code> parameters to see the effect this has on clustering. </p> <pre><code>CLUSTER\n    MAXDISTANCE 50\n    REGION \"ellipse\"\nEND\n</code></pre> </li> </ol>"},{"location":"advanced/debugging/","title":"Debugging MapServer","text":"<p>TODO</p> <pre><code>    LAYER\n        NAME \"countries\"\n        DEBUG 5\n</code></pre> <pre><code>DEBUG 5\nCONFIG MS_ERRORFILE \"stderr\"\n</code></pre> <p>Then follow live logs:</p> <p>docker logs -f mapserver</p>"},{"location":"advanced/mapscript/","title":"MapScript","text":"<p>Warning</p> <p>This page is currently in a draft form.</p>"},{"location":"advanced/mapscript/#overview","title":"Overview","text":"<p>MapServer has its own scripting language - MapScript. MapScript is available in several programming languages including Python, PHP, and Perl. They all share a common MapScript API.</p>"},{"location":"advanced/mapscript/#adding-mapscript-to-the-docker-container","title":"Adding MapScript to the Docker Container","text":"<p>MapScript is not installed on the MapServer Docker image by default, but it can be added using the approach below.</p> <p>Tip</p> <p>The MapScript package must match the version of MapServer installed on the Docker image or segmentation faults will occur.</p> <pre><code># start an interactive session with the MapServer Docker container\ndocker exec -it mapserver /bin/bash\n\napt install python3-pip -y\npip install /scripts/mapscript-8.4.0-cp312-cp312-linux_x86_64.whl --break-system-packages\n\n# test that we can import MapScript successfully\npython -c \"import mapscript;print(mapscript.msGetVersion())\"\n</code></pre>"},{"location":"advanced/mapscript/#example-script","title":"Example Script","text":"<p>One use of MapScript is to help with writing Mapfiles by getting information from its data sources. Some examples are provided below.</p>"},{"location":"advanced/mapscript/#reading-data-extents","title":"Reading Data Extents","text":"<pre><code>\"\"\"\npython /scripts/extents.py\n\"\"\"\n\nimport mapscript\n\nmapfile = \"/etc/mapserver/lakes.map\"\nm = mapscript.mapObj(mapfile)\n\nlyr = m.getLayerByName(\"lakes\")\nextent = lyr.getExtent()\n\noriginal_projection_code = m.getProjection()\noriginal_projection = mapscript.projectionObj(original_projection_code)\n\nwebmercator = mapscript.projectionObj(\"epsg:3857\")\n\nextent_string = f\"[{extent.minx}, {extent.miny}, {extent.maxx}, {extent.maxy}]\"\nprint(extent_string)\n\n# reprojection is done in-place\nextent.project(original_projection, webmercator)\n\nextent_string = f\"[{extent.minx}, {extent.miny}, {extent.maxx}, {extent.maxy}]\"\nprint(extent_string)\n\ncenter = f\"[{(extent.maxx + extent.minx) / 2}, {(extent.maxy + extent.miny) / 2}]\"\nprint(center)\n\nprint(\"Done!\")\n</code></pre>"},{"location":"advanced/qgis/","title":"QGIS as Client","text":"<p>Warning</p> <p>This page is currently in a draft form.</p>"},{"location":"advanced/scales/","title":"Zoom Scales","text":"<p>Warning</p> <p>This page is currently in a draft form.</p> <p>TODO</p>"},{"location":"advanced/sld/","title":"Styled Layer Descriptor (SLD) in MapServer","text":"<p>Warning</p> <p>This page is currently in a draft form.</p>"},{"location":"advanced/sld/#overview","title":"Overview","text":"<p>Styled Layer Descriptor (SLD) is an OGC standard used for describing styles. SLD files are written in XML. </p> <p>SLD can be used by MapServer in several different ways:</p> <ol> <li>Applying an external SLD file from a URL to a WMS service</li> <li>Using SLD in a Mapfile to style a <code>LAYER</code>.</li> <li>Generating SLD from a Mapfile</li> </ol> <p>This exercise will focus on the first use case.</p>"},{"location":"advanced/sld/#code","title":"Code","text":"<p>Example</p> <ul> <li>Direct MapServer request: http://localhost:7000/?map=/etc/mapserver/lines.map&amp;mode=map&amp;layer=roads</li> <li>Local OpenLayers example: http://localhost:7001/sld.html</li> <li>GetCapabilities request: http://localhost:7000/?map=/etc/mapserver/sld.map&amp;REQUEST=GetCapabilities&amp;SERVICE=WMS&amp;VERSION=1.3.0</li> <li>Request to generate SLD from a Mapfile: http://localhost:7000/?map=/etc/mapserver/sld.map&amp;REQUEST=GetStyles&amp;SERVICE=WMS&amp;LAYERS=countries&amp;VERSION=1.3.0&amp;sld=http://node:7001/data/sld.xml</li> </ul> Sld <pre><code>&lt;StyledLayerDescriptor version=\"1.1.0\"&gt;\n  &lt;NamedLayer&gt;\n    &lt;!-- The Name here must match the LAYER NAME in the Mapfile --&gt;\n    &lt;Name&gt;countries&lt;/Name&gt;\n    &lt;UserStyle&gt;\n      &lt;FeatureTypeStyle&gt;\n        &lt;Rule&gt;\n          &lt;Name&gt;Country Boundaries&lt;/Name&gt;\n          &lt;Filter&gt;\n            &lt;PropertyIsNotEqualTo&gt;\n              &lt;PropertyName&gt;ADMIN&lt;/PropertyName&gt;\n              &lt;Literal&gt;Estonia&lt;/Literal&gt;\n            &lt;/PropertyIsNotEqualTo&gt;\n          &lt;/Filter&gt;\n          &lt;LineSymbolizer&gt;\n            &lt;Stroke&gt;\n              &lt;SvgParameter name=\"stroke-width\"&gt;2&lt;/SvgParameter&gt;\n              &lt;SvgParameter name=\"stroke\"&gt;#638889&lt;/SvgParameter&gt;\n            &lt;/Stroke&gt;\n          &lt;/LineSymbolizer&gt;\n          &lt;PolygonSymbolizer&gt;\n            &lt;Fill&gt;\n              &lt;CssParameter name=\"fill\"&gt;#9DBC98&lt;/CssParameter&gt;\n              &lt;CssParameter name=\"fill-opacity\"&gt;0.5&lt;/CssParameter&gt;\n            &lt;/Fill&gt;\n          &lt;/PolygonSymbolizer&gt;\n        &lt;/Rule&gt;\n        &lt;Rule&gt;\n          &lt;Name&gt;Highlighted Country&lt;/Name&gt;\n          &lt;Filter&gt;\n            &lt;PropertyIsEqualTo&gt;\n              &lt;PropertyName&gt;ADMIN&lt;/PropertyName&gt;\n              &lt;Literal&gt;Estonia&lt;/Literal&gt;\n            &lt;/PropertyIsEqualTo&gt;\n          &lt;/Filter&gt;\n          &lt;PolygonSymbolizer&gt;\n            &lt;Fill&gt;\n              &lt;CssParameter name=\"fill\"&gt;#FFEA20&lt;/CssParameter&gt;\n            &lt;/Fill&gt;\n            &lt;Stroke&gt;\n              &lt;CssParameter name=\"stroke\"&gt;#000000&lt;/CssParameter&gt;\n              &lt;CssParameter name=\"stroke-width\"&gt;2&lt;/CssParameter&gt;\n            &lt;/Stroke&gt;\n          &lt;/PolygonSymbolizer&gt;\n        &lt;/Rule&gt;\n      &lt;/FeatureTypeStyle&gt;\n    &lt;/UserStyle&gt;\n  &lt;/NamedLayer&gt;\n&lt;/StyledLayerDescriptor&gt;\n</code></pre> sld.js <pre><code>import ImageWMS from 'ol/source/ImageWMS.js';\nimport Map from 'ol/Map.js';\nimport View from 'ol/View.js';\nimport { Image as ImageLayer } from 'ol/layer.js';\n\nconst mapserverUrl = import.meta.env.VITE_MAPSERVER_BASE_URL;\nconst appUrl = import.meta.env.VITE_APP_URL;\nconst mapfilesPath = import.meta.env.VITE_MAPFILES_PATH;\n\nconst wmsSource = new ImageWMS({\n    url: mapserverUrl + mapfilesPath + 'sld.map&amp;',\n    params: {\n        'LAYERS': 'countries',\n        'SLD': appUrl + 'sld.xml',\n        'SLD_VERSION': '1.1.0'\n    },\n    ratio: 1\n});\n\nconst updateLegend = function (resolution) {\n    const graphicUrl = wmsSource.getLegendUrl(resolution);\n    const img = document.getElementById('legend');\n    img.src = graphicUrl;\n};\n\nconst layers = [\n    new ImageLayer({\n        extent: [-20037508.34, - 20048966.1, 20037508.34, 20048966.1],\n        source: wmsSource\n    }),\n];\nconst map = new Map({\n    layers: layers,\n    target: 'map',\n    view: new View({\n        center: [881083.0, 7481426.5],\n        zoom: 3,\n    }),\n});\n\n\n// Initial legend\nconst resolution = map.getView().getResolution();\nupdateLegend(resolution);\n\n// Update the legend when the resolution changes\nmap.getView().on('change:resolution', function (event) {\n    const resolution = event.target.getResolution();\n    updateLegend(resolution);\n});\n</code></pre> sld.map <pre><code>MAP\n    NAME \"Welcome!\"\n    EXTENT -20037508.34 -20048966.1 20037508.34 20048966.1\n    #EXTENT -180 -90 180 90\n    PROJECTION\n        #\"init=epsg:4326\"\n        \"init=epsg:3857\"\n    END\n    WEB\n        METADATA\n            \"wms_enable_request\" \"*\"\n        END\n    END\n\n    SYMBOL\n        NAME \"circlef\"\n        TYPE ELLIPSE\n        FILLED TRUE\n        POINTS\n            10 10\n        END\n    END\n    IMAGECOLOR \"#ADD8E6\"\n    LAYER\n        NAME \"countries\"\n        DEBUG 5\n        TYPE POLYGON\n        PROJECTION\n            \"init=epsg:4326\"\n        END\n        STATUS ON\n\n        TEMPLATE \"ttt\"\n        METADATA\n            \"gml_include_items\" \"all\"\n            \"gml_types\" \"auto\"\n        END\n\n        CONNECTIONTYPE OGR\n        CONNECTION \"data/naturalearth\"\n        DATA \"ne_110m_admin_0_countries\"\n        EXTENT -180.0 -90.0 180.0 90\n        PROCESSING \"CLOSE_CONNECTION=DEFER\"\n        CLASS\n            STYLE\n                COLOR 60 179 113\n                OUTLINECOLOR 255 255 255\n                OUTLINEWIDTH 0.1\n            END\n        END\n    END\n    #LAYER\n    #    NAME \"cities\"\n    #    TYPE POINT\n    #    PROJECTION\n    #        \"init=epsg:4326\"\n    #    END\n    #    STATUS ON\n    #    CONNECTIONTYPE OGR\n    #    CONNECTION \"/data/naturalearth/fgb\"\n    #    DATA \"SELECT *, 15-LABELRANK AS POINTSIZE FROM ne_110m_populated_places\"\n    #    EXTENT -180.0 -90.0 180.0 90\n    #    CLASS\n    #        EXPRESSION ([WORLDCITY] = 1)\n    #        STYLE\n    #            SYMBOL \"circlef\"\n    #            COLOR \"#6A5ACD\"\n    #            SIZE [POINTSIZE]\n    #        END\n    #        LABEL\n    #            TEXT \"[NAME]\"\n    #            FONT \"arial\"\n    #            SIZE 10\n    #            POSITION \"ul\"\n    #        END\n    #    END\n    #END\nEND\n</code></pre>"},{"location":"advanced/sld/#exercises","title":"Exercises","text":"<ol> <li>Update the SLD XML file. You will then need to refresh the browser to see changes.</li> </ol>"},{"location":"advanced/symbols/","title":"Vector Symbols","text":""},{"location":"advanced/symbols/#overview","title":"Overview","text":"<p>In this exercise we'll look at how SYMBOLs can be used to apply complex cartographic effects to vector data. The Mapfile displays OpenStreetMap railways in Tartu, Estonia.</p>"},{"location":"advanced/symbols/#vector-symbols_1","title":"Vector Symbols","text":"<p>We've looked at <code>ELLIPSE</code>, and <code>TRUETYPE</code> symbols in the Points Styling exercise. In this example  we'll be looking at Vector Symbols - which use vector drawings to define the shape of a symbol.</p> <p>First you define the SYMBOLs - either be directly in the Mapfile, or in a separate SYMBOLSET file. The advantage of using a separate file is that you can share symbols between maps. A minor disadvantage is we need to deploy an extra file, and ensure the Mapfile has the correct path to the <code>SYMBOLSET</code> - this can be a full path or relative to the Mapfile.</p> <p>In this example as we only have two symbols we will add them directly to the Mapfile.  First we define the symbols. We'll start with a simple vertical line, by defining <code>POINTS</code> as x,y coordinates:</p> <pre><code>SYMBOL\n    NAME \"vertline\" # we can use this to reference the SYMBOL in STYLEs\n    TYPE VECTOR\n    FILLED FALSE # the symbol will be treated as a LINE\n    POINTS\n        0 0\n        0 10\n    END\nEND\n</code></pre> <p>Next we'll create a simple square symbol:</p> <pre><code>SYMBOL\n    NAME \"square\"\n    TYPE VECTOR\n    FILLED TRUE # the symbol will be treated as a POLYGON\n    POINTS\n        0 0\n        0 10\n        10 10\n        10 0\n    END\nEND\n</code></pre> <p>Now we can refer to these symbols by their <code>NAME</code>s in a <code>STYLE</code> definitions. As out <code>vertline</code> symbol has <code>FILLED</code> is set to <code>FALSE</code> the symbol is treated as a line rather than a polygon. This means a <code>WIDTH</code> can be set on the <code>STYLE</code> to change the width of the symbol.</p> <p>A GAP is added to the style. The value specifies the distance of the centre of one <code>vertline</code> symbol to the next. The negative value renders the symbols relative to the tangent of the line - without this the lines will be displayed vertically, whereas we want them to cross the underlying line.</p> <pre><code>STYLE\n    COLOR 102 102 102\n    SYMBOL \"vertline\"\n    WIDTH 0.4\n    GAP -50\nEND\n</code></pre> <p>We'll use the <code>square</code> symbol to represent stations and stops. We can apply a <code>SIZE</code> and <code>COLOR</code> to the symbol:</p> <pre><code>STYLE\n    SYMBOL \"square\"\n    SIZE 16\n    COLOR 102 102 102\nEND\n</code></pre>"},{"location":"advanced/symbols/#code","title":"Code","text":"<p>Example</p> <ul> <li>Direct MapServer request: http://localhost:7000/?map=/etc/mapserver/railways.map&amp;mode=map&amp;layer=roads</li> <li>Local OpenLayers example: http://localhost:7001/railways.html</li> </ul> railways.js <pre><code>import '../css/style.css';\nimport ImageWMS from 'ol/source/ImageWMS.js';\nimport Map from 'ol/Map.js';\nimport View from 'ol/View.js';\nimport { Image as ImageLayer } from 'ol/layer.js';\nimport { FullScreen, defaults as defaultControls } from 'ol/control.js';\n\nconst mapserverUrl = import.meta.env.VITE_MAPSERVER_BASE_URL;\nconst mapfilesPath = import.meta.env.VITE_MAPFILES_PATH;\n\nconst layers = [\n    new ImageLayer({\n        extent: [2968743.65508978, 8038921.67212233, 2982981.8632402, 8053818.05714347],\n        source: new ImageWMS({\n            url: mapserverUrl + mapfilesPath + 'railways.map&amp;',\n            params: { 'LAYERS': 'tracks,stops'},\n            ratio: 1\n        }),\n    }),\n];\nconst map = new Map({\n    layers: layers,\n    target: 'map',\n    controls: defaultControls().extend([\n        new FullScreen()\n    ]),\n    view: new View({\n        center: [2971862.75916499, 8046369.8646329],\n        zoom: 15,\n    }),\n});\n</code></pre> railways.map <pre><code>MAP\n    NAME \"Railways\"\n    EXTENT 26.668678 58.339241 26.796582 58.40941\n    UNITS DD\n    SIZE 800 600\n    PROJECTION\n        \"init=epsg:4326\"\n    END\n    SYMBOL\n        NAME \"vertline\" # we can use this to reference the SYMBOL in STYLEs\n        TYPE VECTOR\n        FILLED FALSE # the symbol will be treated as a LINE\n        POINTS\n            0 0\n            0 10\n        END\n    END\n    SYMBOL\n        NAME \"square\"\n        TYPE VECTOR\n        FILLED TRUE # the symbol will be treated as a POLYGON\n        POINTS\n            0 0\n            0 10\n            10 10\n            10 0\n        END\n    END\n    WEB\n        METADATA\n            \"ows_enable_request\" \"*\" \n            \"ows_srs\" \"EPSG:4326 EPSG:3857\"\n        END\n    END\n    LAYER\n        NAME \"tracks\"\n        STATUS OFF\n        TYPE LINE\n        CONNECTIONTYPE FLATGEOBUF\n        DATA \"data/osm/railways.fgb\"\n        CLASS\n            EXPRESSION ( \"[name]\" != \"\" )\n            STYLE\n                COLOR 102 102 102\n                WIDTH 4.0\n            END\n            STYLE\n                COLOR 255 255 255\n                WIDTH 2.0\n                LINECAP BUTT\n                PATTERN\n                    8 12\n                END\n            END\n            LABEL\n                TEXT \"[name]\"\n                COLOR 102 102 102\n                SIZE 12\n                ANGLE FOLLOW\n                OFFSET 8 -99\n            END\n        END\n        CLASS\n            STYLE\n                COLOR 102 102 102\n                WIDTH 0.8\n            END\n            STYLE\n                COLOR 102 102 102\n                SYMBOL \"vertline\"\n                WIDTH 0.4\n                GAP -50\n            END\n        END\n    END\n\n    LAYER\n        NAME \"stops\"\n        STATUS OFF\n        TYPE POINT\n        TEMPLATE \"void\"\n        METADATA\n            \"gml_include_items\" \"all\"\n            \"gml_featureid\" \"osm_id\"\n        END\n        CONNECTIONTYPE FLATGEOBUF\n        DATA \"data/osm/transport.fgb\"\n        CLASSITEM \"fclass\"\n        CLASS\n            EXPRESSION {railway_station,railway_halt}\n            STYLE\n                SYMBOL \"square\"\n                SIZE 16\n                COLOR 102 102 102\n            END\n            LABEL\n                TEXT \"[name]\"\n                POSITION ur\n                COLOR 102 102 102\n                SIZE 18\n            END\n        END\n        END\n    END\nEND\n</code></pre>"},{"location":"advanced/symbols/#exercises","title":"Exercises","text":"<ol> <li> <p>Try experimenting with the <code>GAP</code> values to see how this affects the output.</p> <pre><code>STYLE\n    COLOR 102 102 102\n    SYMBOL \"vertline\"\n    WIDTH 0.4\n    GAP -50\nEND\n</code></pre> </li> <li> <p>Change the square symbol used for stations into a different shape such as a triangle.</p> </li> </ol>"},{"location":"advanced/symbols/#further-reading","title":"Further Reading","text":"<ul> <li>Cartographical Symbol Construction with MapServer</li> <li>MapServer Symbology Exchange</li> </ul>"},{"location":"inputs/databases/","title":"Databases","text":""},{"location":"inputs/databases/#overview","title":"Overview","text":"<p>MapServer can connect to most geospatial databases. There are native MapServer drivers for PostgreSQL/PostGIS, Oracle, and Microsoft SQL Server. Other databases can be accessed through OGR, for example MySQL.</p> <p>In this exercise we'll be connecting to a PostGIS database to display water polygon features using a MapServer WMS. PostGIS spatially enables the PostgreSQL databases. </p>"},{"location":"inputs/databases/#docker-setup","title":"Docker Setup","text":"<p>To avoid having to install and setup a database we'll be using the PostGIS Docker image provided by Kartoza.</p> <p>Info</p> <p>We will use a different Docker Compose file, which includes a PostGIS container for this exercise. We can stop the current Docker containers, and run the alternate Docker containers with the following commands:</p> <pre><code>cd ./getting-started-with-mapserver/workshop/exercises\ndocker compose down\ndocker compose -f docker-db-compose.yml up -d\n# when finished\ndocker compose -f docker-db-compose.yml down\n</code></pre>"},{"location":"inputs/databases/#checking-the-database-connection-with-qgis","title":"Checking the Database Connection with QGIS","text":"<p>If you have QGIS installed on your machine you can check you can successfully connect to the database by opening the browser panel, and creating a new PostgreSQL connection:</p> The QGIS Browser Panel Connecting to the Database with QGIS <p>Tip</p> <ul> <li> <p>When connecting to the database from another Docker container port <code>5432</code> is used, and the host name is <code>db</code>   as defined in the <code>docker-compose.yml</code> file.</p> </li> <li> <p>When connecting from your own machine port <code>25434</code> is used (this is chosen to avoid clashes with any locally running databases).</p> </li> </ul>"},{"location":"inputs/databases/#adding-data-to-the-database","title":"Adding Data to The Database","text":"<p>We can use the OGR tool ogr2ogr installed on the MapServer container to add datasets to the PostgreSQL database.</p> <pre><code># connect to the MapServer Docker image which includes OGR tools for importing data\ndocker exec -it mapserver2 bash\n# navigate to the folder containing the OSM FlatGeobuf files\ncd /etc/mapserver/data/osm\n# import the water polygons dataset to the Postgres database in the Postgres Docker image\nogr2ogr -f \"PostgreSQL\" PG:\"dbname=gis user=docker password=docker host=db port=5432\" -nln water_a water_a.fgb\n# now check the data details in the database\nogrinfo PG:\"host=db user=docker password=docker dbname=gis port=5432\" water_a -summary\n</code></pre>"},{"location":"inputs/databases/#code","title":"Code","text":"<p>Exercise Links</p> <ul> <li>MapServer request: http://localhost:7000/?map=/etc/mapserver/postgis.map&amp;mode=map&amp;layer=water</li> <li>OpenLayers example: http://localhost:7001/postgis.html</li> </ul> postgis.js <pre><code>import '../css/style.css';\nimport ImageWMS from 'ol/source/ImageWMS.js';\nimport Map from 'ol/Map.js';\nimport OSM from 'ol/source/OSM.js';\nimport View from 'ol/View.js';\nimport { Image as ImageLayer, Tile as TileLayer } from 'ol/layer.js';\n\nconst mapserverUrl = import.meta.env.VITE_MAPSERVER_BASE_URL;\nconst mapfilesPath = import.meta.env.VITE_MAPFILES_PATH;\n\nconst layers = [\n    new TileLayer({\n        source: new OSM(),\n        className: 'bw'\n    }),\n    new ImageLayer({\n        extent: [2968743.65508978, 8038921.67212233, 2982981.8632402, 8053818.05714347],\n        source: new ImageWMS({\n            url: mapserverUrl + mapfilesPath + 'postgis.map&amp;',\n            params: { 'LAYERS': 'water', 'STYLES': '' }\n        }),\n    }),\n];\nconst map = new Map({\n    layers: layers,\n    target: 'map',\n    view: new View({\n        center: [2975862.75916499, 8046369.8646329],\n        zoom: 14,\n    }),\n});\n</code></pre> postgis.map <pre><code>MAP\n  NAME \"PostGIS\"\n  EXTENT 26.668678 58.339241 26.796582 58.409410\n  UNITS DD\n  SIZE 800 600\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    METADATA\n      \"ows_title\" \"OSM Water\"\n      \"ows_enable_request\" \"*\"\n      \"ows_srs\" \"EPSG:4326 EPSG:3857\"\n    END\n  END\n\n  LAYER\n    NAME \"water\"\n    STATUS OFF\n    TYPE POLYGON\n    CONNECTIONTYPE POSTGIS\n    CONNECTION \"host=db user=docker password=docker port=5432 dbname=gis\"\n    DATA \"wkb_geometry FROM water_a USING UNIQUE ogc_fid USING srid=4326\"\n\n    PROCESSING \"CLOSE_CONNECTION=DEFER\" # for maximum performance\n    CLASS\n      GROUP \"default\"\n      STYLE\n        COLOR \"#d4f1f9\"\n        OUTLINECOLOR \"#918151\"\n      END\n    END\n  END\n\nEND\n</code></pre>"},{"location":"inputs/databases/#exercises","title":"Exercises","text":"<ol> <li>Try and load another dataset into the database using the <code>ogr2ogr</code> approach above.</li> <li>Now add a new layer to the Mapfile to display the layer. You can make a direct request to MapServer in the form:   http://localhost:7000/?map=/etc/mapserver/postgis.map&amp;mode=map&amp;layers=water%20NEWLAYERNAME.</li> <li> <p>Now update the JS file so the layer is visible as part of the interactive map, through WMS:</p> <pre><code>  source: new ImageWMS({\n      url: mapserverUrl + mapfilesPath + 'postgis.map&amp;',\n      params: { 'LAYERS': 'water,NEWLAYERNAME', 'STYLES': '' },\n      ratio: 1\n  }),\n</code></pre> </li> </ol>"},{"location":"inputs/raster/","title":"Raster Data","text":""},{"location":"inputs/raster/#overview","title":"Overview","text":"<p>MapServer can serve both vector and raster data.</p> <p>The dataset used in this example is elevation data from the Estonian Geoportal, and data provided by the Estonian Land Board 2024. It covers Tartu center and is from map sheet 474659.</p>"},{"location":"inputs/raster/#viewing-dataset-details","title":"Viewing Dataset Details","text":"<p>We can view details about this dataset using gdalinfo which is installed on the MapServer Docker container.</p> <pre><code># first connect to the MapServer Docker container\ndocker exec -it mapserver /bin/bash\n\n# now get some basic details about the dataset\ngdalinfo /etc/mapserver/data/raster/54752_dtm_1m.tif\n\n# we can also view these details as JSON for easier parsing\ngdalinfo /etc/mapserver/data/raster/54752_dtm_1m.tif -stats -json\n</code></pre>"},{"location":"inputs/raster/#a-raster-layer","title":"A Raster LAYER","text":"<pre><code>LAYER\n  NAME \"dtm\"\n  EXTENT 655000 6470000 660000 6475000\n  STATUS OFF\n  TYPE RASTER\n  DATA \"data/raster/54752_dtm_1m.tif\"\n  PROJECTION\n      \"epsg:3301\"\n  END\n  COMPOSITE\n      OPACITY 80\n  END\n  INCLUDE \"terrain.include\"\nEND\n</code></pre> <p>There are a few points to note in this Mapfile. </p>"},{"location":"inputs/raster/#include-files","title":"Include Files","text":"<p>We are making use of the INCLUDE  directive. This allows us to include additional files within our Mapfile. Any file extensions can be used, and paths are always relative to the main Mapfile. In this case <code>terrain.include</code> contains a list of <code>CLASS</code>es to style the raster data. These classes were generated using a Python script - by keeping them in a separate file we can easily recreate the file without modifying the rest of the Mapfile. INCLUDEs can also be used to help manage large Mapfiles, for example by keeping each LAYER in a separate file. This approach also makes it easier to share LAYERs between different Mapfiles.</p> <p>The <code>terrain.include</code> file shows how we can style raster data. There are classes that apply a different RGB colour to the data based on the <code>[pixel]</code> value for each cell:</p> <pre><code>CLASS\n  EXPRESSION ([pixel] &gt;= 30.68 AND [pixel] &lt; 37.245625)\n  STYLE\n    COLOR 107 129 31\n  END\nEND\n\nCLASS\n  EXPRESSION ([pixel] &gt;= 37.245625 AND [pixel] &lt; 43.81125)\n  STYLE\n    COLOR 107 106 26\n  END\nEND\n</code></pre>"},{"location":"inputs/raster/#composite-blocks","title":"Composite Blocks","text":"<p>A COMPOSITE block is used on the layer to make it 20% transparent.</p>"},{"location":"inputs/raster/#code","title":"Code","text":"<p>Example</p> <ul> <li>MapServer request: http://localhost:7000/?map=/etc/mapserver/raster.map&amp;mode=map&amp;layer=dtm</li> <li>OpenLayers example: http://localhost:7001/raster.html</li> </ul> raster.js <pre><code>import '../css/style.css';\nimport ImageWMS from 'ol/source/ImageWMS.js';\nimport Map from 'ol/Map.js';\nimport OSM from 'ol/source/OSM.js';\nimport View from 'ol/View.js';\nimport { Image as ImageLayer, Tile as TileLayer } from 'ol/layer.js';\n\nconst mapserverUrl = import.meta.env.VITE_MAPSERVER_BASE_URL;\nconst mapfilesPath = import.meta.env.VITE_MAPFILES_PATH;\n\nconst layers = [\n    new TileLayer({\n        source: new OSM(),\n    }),\n    new ImageLayer({\n        extent: [2968743.65508978, 8038921.67212233, 2982981.8632402, 8053818.05714347],\n        source: new ImageWMS({\n            attributions: ['Estonian Land Board 2024'],\n            url: mapserverUrl + mapfilesPath + 'raster.map&amp;',\n            params: { 'LAYERS': 'dtm', 'STYLES': '' },\n            ratio: 1\n        }),\n    }),\n];\nconst map = new Map({\n    layers: layers,\n    target: 'map',\n    view: new View({\n        center: [2975862.75916499, 8046369.8646329],\n        zoom: 14,\n    }),\n});\n</code></pre> raster.map <pre><code>MAP\n  NAME \"Raster\"\n  EXTENT 26.668678 58.339241 26.796582 58.409410\n  UNITS DD\n  SIZE 800 600\n\n  IMAGETYPE PNG24\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    METADATA\n      \"ows_enable_request\" \"*\"\n      \"ows_srs\" \"EPSG:4326 EPSG:3857\"\n    END\n  END\n\n  LAYER\n    NAME \"dtm\"\n    EXTENT 655000 6470000 660000 6475000\n    STATUS OFF\n    TYPE RASTER\n    # Map data: Estonian Land Board 2024\n    DATA \"data/raster/54752_dtm_1m.tif\"\n    PROJECTION\n        \"epsg:3301\"\n    END\n    COMPOSITE\n        OPACITY 80\n    END\n    INCLUDE \"terrain.include\"\n  END\n\nEND\n</code></pre>"},{"location":"inputs/raster/#exercises","title":"Exercises","text":"<ol> <li>Try different settings for layer <code>OPACITY</code> to see its effect on the output in <code>raster.map</code>.</li> <li>Change the <code>COLOR</code> of the first <code>CLASS</code> in <code>terrain.include</code> to highlight which pixels have values in this range.     Cyan (<code>COLOR 0 255 255</code>) is a good colour for highlighting.</li> </ol>"},{"location":"inputs/vector/","title":"Vector Data","text":""},{"location":"inputs/vector/#overview","title":"Overview","text":"<p>We've already seen several examples of serving vector data using a Mapfile. MapServer has native support for many  Vector formats. MapServer can also read data through OGR - the vector component of GDAL, which has support for over 80 vector drivers.</p> <p>Native support means the code to read the data is a part of the MapServer codebase, which can make it more optimised.  The OGR drivers however may be better maintained. For formats which have both native and OGR support, for example Shapefiles and FlatGeobuf it is not always a clear decision which to use.</p> <p>More information can be found on the Vector Data Management &amp; Optimization page in the MapServer documentation.</p>"},{"location":"inputs/vector/#remote-datasets-using-virtual-file-systems","title":"Remote Datasets using  Virtual File Systems","text":"<p>GDAL's Virtual File Systems can be used to access data over stored on a network, for example on a server or Amazon S3 bucket. </p> <pre><code>CONNECTIONTYPE OGR\nCONNECTION \"/vsicurl/https://raw.githubusercontent.com/ofrohn/d3-celestial/master/data/constellations.lines.json\"\n</code></pre> <p>MapServer (through GDAL) takes advantage of the newer Cloud-Optimised formats such as COGs - \"Cloud-Optimized GeoTIFFs\". These formats use range requests to access only the data needed, so MapServer only needs to download the data for rendering rather than a huge GeoTIFF file.</p>"},{"location":"inputs/vector/#code","title":"Code","text":"<p>Example</p> <ul> <li>MapServer request: http://localhost:7000/?map=/etc/mapserver/stars.map&amp;mode=map&amp;layer=constellations</li> <li>OpenLayers example: http://localhost:7001/stars.html</li> </ul> stars.js <pre><code>import '../css/style.css';\nimport ImageWMS from 'ol/source/ImageWMS.js';\nimport Map from 'ol/Map.js';\nimport View from 'ol/View.js';\nimport { Image as ImageLayer } from 'ol/layer.js';\nimport { FullScreen, defaults as defaultControls } from 'ol/control.js';\n\nconst mapserverUrl = import.meta.env.VITE_MAPSERVER_BASE_URL;\nconst mapfilesPath = import.meta.env.VITE_MAPFILES_PATH;\n\nconst layers = [\n    new ImageLayer({\n        source: new ImageWMS({\n            url: mapserverUrl + mapfilesPath + 'stars.map&amp;',\n            params: { 'LAYERS': 'constellations,stars,stars2'},\n            ratio: 1\n        }),\n    }),\n];\nconst map = new Map({\n    layers: layers,\n    target: 'map',\n    controls: defaultControls().extend([\n        new FullScreen()\n    ]),\n    view: new View({\n        projection: 'EPSG:4326',\n        center: [0, 0],\n        zoom: 4\n    }),\n});\n</code></pre> stars.map <pre><code>MAP\n    NAME \"Stars!\"\n    EXTENT -42.33528830884047 -47.25854720678822 43.404846801027695 24.75957883214916\n    PROJECTION\n        \"init=epsg:4326\"\n    END\n    SIZE 400 400\n    FONTSET \"data/fonts/fontset.txt\"\n    SYMBOL\n        NAME \"circle\"\n        TYPE ELLIPSE\n        FILLED TRUE\n        POINTS\n            1 1\n        END\n    END\n    WEB\n        METADATA\n            \"ows_enable_request\" \"*\" \n            \"ows_srs\" \"EPSG:4326 EPSG:3857\" \n        END\n    END    \n    IMAGECOLOR 0 0 0\n    LAYER\n        TYPE LINE\n        PROJECTION\n            AUTO\n        END\n        NAME \"constellations\"\n        STATUS OFF\n        CONNECTIONTYPE OGR\n        CONNECTION \"/vsicurl/https://raw.githubusercontent.com/ofrohn/d3-celestial/master/data/constellations.lines.json\"\n        LABELITEM \"Id\"\n        CLASS\n            LABEL\n                COLOR \"#15f4ee\"\n                FONT \"LiberationMono\"\n                TYPE TRUETYPE\n                SIZE 10\n                POSITION AUTO\n                PARTIALS FALSE\n            END\n            STYLE\n                COLOR \"#15f4ee\"\n                WIDTH 1\n            END\n        END\n    END\n    LAYER\n        TYPE POINT\n        NAME \"stars\"\n        STATUS OFF\n        CONNECTIONTYPE OGR\n        CONNECTION \"/vsicurl/https://raw.githubusercontent.com/ofrohn/d3-celestial/master/data/stars.14.json\"\n        PROCESSING \"NATIVE_FILTER=mag&gt;12\"\n        COMPOSITE\n            COMPFILTER \"blur(5)\"\n            OPACITY 90\n        END\n        CLASS\n            STYLE\n                SYMBOL \"circle\"\n                COLOR \"#ffcd3c\"\n                SIZE [mag]\n            END\n        END\n    END\n    LAYER\n        TYPE POINT\n        NAME \"stars2\"\n        STATUS OFF\n        CONNECTIONTYPE OGR\n        CONNECTION \"/vsicurl/https://raw.githubusercontent.com/ofrohn/d3-celestial/master/data/stars.14.json\"\n        PROCESSING \"NATIVE_FILTER=mag&gt;10\"\n        CLASS\n            STYLE\n                SYMBOL \"circle\"\n                COLOR 255 255 255\n                SIZE 2\n            END\n        END\n    END\nEND\n</code></pre>"},{"location":"inputs/vector/#exercises","title":"Exercises","text":"<ol> <li> <p>Try adding a new dataset to the <code>stars.map</code>, for example <code>mw.json</code> which is at the same location as the other datasets:</p> <pre><code>LAYER\n    TYPE POLYGON\n    NAME \"milkyway\"\n    STATUS OFF\n    # TODO add in the data connection\n    COMPOSITE\n        OPACITY 30\n    END\n    CLASS\n        STYLE\n            COLOR 230 230 230\n            OUTLINECOLOR 50 50 50\n        END\n    END\nEND\n</code></pre> <p>In the <code>stars.js</code> you will need to ensure the <code>milkyway</code> layer is added to the OpenLayers map:</p> <pre><code>params: { 'LAYERS': 'constellations,stars,stars2,milkyway'},\n</code></pre> </li> </ol>"},{"location":"introduction/commandline/","title":"MapServer on the Command Line","text":"<p>You can interact with MapServer on the Docker container using the command line. Run the following commands from your system shell:</p> <pre><code># first connect to the Docker container, and open a bash shell\ndocker exec -it mapserver /bin/bash\n# now show the MapServer version\nmapserv -v\n</code></pre> <p>This should output the MapServer version, along with other details such as PROJ and GDAL versions, and supported input and output formats:</p> <pre><code>MapServer version 8.4.0 PROJ version 9.5 GDAL version 3.10 OUTPUT=PNG OUTPUT=JPEG OUTPUT=KML SUPPORTS=PROJ SUPPORTS=AGG SUPPORTS=FREETYPE \nSUPPORTS=CAIRO SUPPORTS=SVG_SYMBOLS SUPPORTS=RSVG SUPPORTS=ICONV SUPPORTS=FRIBIDI SUPPORTS=WMS_SERVER SUPPORTS=WMS_CLIENT SUPPORTS=WFS_SERVER \nSUPPORTS=WFS_CLIENT SUPPORTS=WCS_SERVER SUPPORTS=SOS_SERVER SUPPORTS=OGCAPI_SERVER SUPPORTS=FASTCGI SUPPORTS=GEOS SUPPORTS=PBF INPUT=JPEG \nINPUT=POSTGIS INPUT=OGR INPUT=GDAL INPUT=SHAPEFILE INPUT=FLATGEOBUF\n</code></pre> <p>When run through a web server, data is passed to the <code>mapserv</code> application, which generates output that is then sent back through the web server. All web requests can be recreated and tested on the command line, this makes it a handy debugging tool. </p> <p>To test a URL such as http://localhost:7000/?map=/etc/mapserver/countries.map&amp;mode=map run the following command:</p> <pre><code>mapserv \"QUERY_STRING=map=/etc/mapserver/countries.map&amp;mode=map\"\n</code></pre> <p>This will output a PNG image to the command line - this will look like gargabe!</p> <p>We can save the output by redirecting it to a file using <code>&gt;</code>.  As the <code>mapserv</code> program returns responses for a web client it also returns HTTP headers. To create a valid image file we need to strip these header by using the <code>-nh</code> (no headers) switch.</p> <pre><code>mapserv -nh \"QUERY_STRING=map=/etc/mapserver/countries.map&amp;mode=map\" &gt; /etc/mapserver/test.png\n</code></pre> <p><code>test.png</code> should now be on your local disk at <code>getting-started-with-mapserver/workshop/exercises/mapfiles</code>.</p> <p></p> <p>Tip</p> <p>The <code>docker-compose.yml</code> file maps local folders to folders on the Docker container. Files created in the Docker container will be visible on your local disk, and files on your local disk will be visible in the container. This is set in in the <code>volumes</code> section, using the syntax <code>- LOCAL_FOLDER:CONTAINER_FOLDER</code></p> <pre><code>volumes:\n  - ./scripts:/scripts\n  - ./mapfiles:/etc/mapserver\n</code></pre> <p>We can see all command options using the <code>--help</code> switch:</p> <pre><code>mapserver --help\n</code></pre> <p>All MapServer output can be returned on the command line, not just images. For example, to see a WMS GetCapabilities XML response, run the following command:</p> <pre><code>mapserv -nh \"QUERY_STRING=map=/etc/mapserver/points.map&amp;SERVICE=WMS&amp;REQUEST=GetCapabilities\"\n</code></pre>"},{"location":"introduction/docker/","title":"Docker","text":"<p>We will be using MapServer on a Docker image for the workshop. This ensures that the MapServer version and the Apache web server configuration are identical.</p>"},{"location":"introduction/docker/#docker-mapserver","title":"Docker MapServer","text":"<p>The MapServer Docker image is provided by Camptocamp, and the Dockerfile is found here. </p> <p>MapServer runs on the Apache web server - see the Apache page page for further details. </p> <p>It uses the Apache mod_fcgid module, module that provides FastCGI support.</p> <p>MapServer runs on port 80 on the Docker container, which is mapped to port 5002 on the local machine, as can be seen in the Docker compose file located at <code>workshop\\exercises\\docker-compose.yml</code>:</p> <pre><code>  mapserver:\n    image: camptocamp/mapserver:8.4-gdal3.10\n    container_name: mapserver\n    ports:\n      - 5002:80\n    environment:\n      MAPSERVER_CONFIG_FILE: \"/etc/mapserver/mapserver.conf\"\n    volumes:\n      - ./scripts:/scripts\n      - ./mapfiles:/etc/mapserver\n    networks:\n      - mynetwork\n</code></pre>"},{"location":"introduction/docker/#javascript-application","title":"JavaScript Application","text":"<p>A second container that serves the JavaScript example pages is also run using Docker. This uses node and runs on port 5001 on both the container and the host machine.</p> <pre><code>  node:\n    image: node:lts-slim\n    container_name: node\n    ports:\n      - 5001:7001\n    working_dir: /home/node/app\n    volumes:\n      - ./app:/home/node/app\n    networks:\n      - mynetwork\n    command: &gt;\n      sh -c \"npm install &amp;&amp; npm start\"\n</code></pre>"},{"location":"introduction/docker/#stopping-and-starting-docker","title":"Stopping and Starting Docker","text":"<pre><code>  cd ./getting-started-with-mapserver/workshop/exercises\n  # start docker in detached mode\n  docker compose up -d\n  # the following URLs should now be available\n  # http://localhost:7000\n  # http://localhost:7001\n\n  # stop docker\n  docker compose down\n\n  # for help\n  docker compose help\n  # for a specific command\n  docker compose up --help\n</code></pre>"},{"location":"introduction/docker/#removing-a-container","title":"Removing a Container","text":"<pre><code># to remove a container named db\ndocker rm db\n</code></pre>"},{"location":"introduction/introduction/","title":"Workshop Introduction","text":""},{"location":"introduction/introduction/#overview","title":"Overview","text":"<p>This workshop is divided into the major topics listed below.</p> <ol> <li> <p>Introduction. An introduction to MapServer and the software used for the workshop. This includes Docker, OpenLayers, and Apache.</p> </li> <li> <p>The Mapfile. A Mapfile is MapServer's configuration file. It points to the data the Map will display, it defines how the data will be displayed, and how the data will be served to client applications such as an Internet browser. This first set of exercises will help to get familiar with the structure, keywords, and syntax of a Mapfile. </p> </li> <li> <p>MapServer Inputs. These exercises show what type of data can be used as inputs into MapServer. Both vector data and raster data are covered. </p> </li> <li> <p>MapServer Outputs. These exercises show how MapServer can publish data. When first created MapServer was used to produce map images, but now it can serve data out in a large number of open geospatial formats. Focus is given to OGC standards as these are free, open and interoperable.</p> </li> <li> <p>Advanced topics. These are a collection of miscellaneous exercises that cover a wide range of MapServer functionality. Selected exercises will be chosen based on the needs to the workshop participants. MapServer has over 25 years of development and  features so new topics will be added over time. </p> </li> </ol>"},{"location":"introduction/introduction/#workshop-outline","title":"Workshop Outline","text":"<p>Below is a rough timeline for how the timings of the 4-hour workshop, with a 15 minute break. These can be adapted based on the needs of the participants.</p> <ul> <li>0h00 - 0h30 - Introduction to the workshop, Docker setup and tests</li> <li>0h30 - 1h30 - Mapfile exercises</li> <li>1h30 - 2h00 - Inputs</li> <li>Break (15 minutes)</li> <li>2h15 - 3h00 - Outputs</li> <li>3h00 - 3h15 - Brief Overview of Advanced topics</li> <li>3h15 - 3h45 - Custom Mapfile creation</li> <li>3h45 - 4h00 - Questions and conclusions</li> </ul>"},{"location":"introduction/introduction/#test-the-docker-compose-config","title":"Test the Docker Compose config","text":"<p>Before making any changes, we will make sure that the initial Docker Compose setup provided to you is actually working. The configuration file for Docker Compose is found at the following location:</p> <ul> <li><code>workshop/exercises/docker-compose.yml</code></li> </ul> <p>Test the workshop configuration</p> <ol> <li>In a terminal shell navigate to the workshop folder and type the following commands:</li> </ol> <pre><code>cd workshop/exercises\ndocker compose up\n</code></pre> <ol> <li>Open http://localhost:7000 in your browser, you should see an error message!</li> <li>Close by pressing <code>CTRL-C</code></li> </ol>"},{"location":"introduction/introduction/#displaying-your-first-map","title":"Displaying your First Map","text":"<ul> <li>Ensure that you have MapServer setup and running at http://localhost:7000.</li> <li>Now try opening the following MapServer URL in your browser - http://localhost:7000/?map=/etc/mapserver/countries.map&amp;mode=map</li> </ul> <p>Note</p> <p>You may also run the Docker container in the background (detached) as follows:</p> <pre><code>docker compose up -d\ndocker container ls  # verify that the mapserver container is running\n# visit http://localhost:7000 in your browser\ndocker logs --follow mapserver  # view logs\ndocker compose stop\n</code></pre>"},{"location":"introduction/introduction/#folder-structure","title":"Folder Structure","text":"<p>Key folders are:</p> <ul> <li><code>workshop/exercises/mapfiles</code> - the location of all the Mapfiles used in the workshop</li> <li><code>workshop/exercises/mapfiles/data</code> - datasets used in the Mapfiles</li> <li><code>workshop/exercises/app/js</code> - the JavaScript files used in the workshop</li> </ul> <p></p> <p>The full workshop folder structure is shown below:</p> <pre><code>+---app\n|   +---css\n|   +---data\n|   +---dist\n|   |   +---assets\n|   |   \\---data\n|   +---js\n+---data\n+---html\n+---mapfiles\n|   +---data\n|   |   +---fonts\n|   |   +---icons\n|   |   +---naturalearth\n|   |   +---osm\n|   |   \\---raster\n|   \\---resources\n|       \\---fills\n\\---scripts\n</code></pre>"},{"location":"introduction/mapserver/","title":"MapServer","text":""},{"location":"introduction/mapserver/#documentation","title":"Documentation","text":"<p>MapServer has comprehensive documentation that can be found online at https://mapserver.org/. </p> <p>Key parts of the documentation are:</p> <ul> <li>An Introduction to MapServer</li> <li>Mapfile Directives</li> <li>Data Inputs</li> <li>Data Outputs</li> <li>OGC Support and Configuration</li> <li>MapServer FAQ</li> </ul>"},{"location":"introduction/mapserver/#how-mapserver-works","title":"How MapServer Works","text":"<p>In its most basic form, MapServer is a CGI program that sits inactive on your web server. When a request is sent to MapServer, it uses information from the request URL and the Mapfile to create an image of the requested map. </p> <p></p>"},{"location":"introduction/mapserver/#mapfiles","title":"Mapfiles","text":"<p>A Mapfile is used to define the data contained in a map and how it will be displayed.</p> <p>Mapfiles are text files, that contain hierarchical and nested blocks. An annotated Mapfile is displayed below:</p> <pre><code># Comment can be added using a hash (#) at the start of a line\n# All Mapfiles begin with a MAP block, and finish with a closing END\nMAP\n    NAME \"mymap\"\n\n    # the default size used for image output\n    SIZE 800 400\n\n    # the projection used for the map\n    PROJECTION\n        \"init=epsg:4326\"\n    END\n\n\n    # the extent of the map in the projection\n    EXTENT -180 -90 180 90\n\n    LAYER\n        NAME \"countries\" # the name of the layer\n        TYPE POLYGON # the layer will display polygons\n        STATUS DEFAULT # this means the layer will always be displayed\n\n        # we will use a FlatGeoBuf country dataset\n        CONNECTIONTYPE FLATGEOBUF\n        DATA \"data/naturalearth/ne_110m_admin_0_countries.fgb\"\n\n        # we will use a single class for all country polygons\n        CLASS\n            STYLE\n                COLOR 60 179 113 # the colour of the polygons\n                OUTLINECOLOR 255 255 255 # the colour of the polygon outline\n                WIDTH 1 # the width of the polygon outline\n            END\n        END\n    END\nEND\n</code></pre> <p></p>"},{"location":"introduction/mapserver/#mapserver-development","title":"MapServer development","text":"<p>The first release of MapServer was in 1997, and is written in a combination of C and C++. </p> <p>A summary of MapServer development from OpenHub is shown below:</p>"},{"location":"introduction/mapserver/#mapserver-dependencies","title":"MapServer dependencies","text":"<p>MapServer is built on several image rendering and geospatial C/C++ libraries.  The below image shows MapServer's key dependencies:</p> <p></p> <p>This means that improvements and features in libraries like GDAL also become available in MapServer. Any GDAL raster driver or vector driver can be used by MapServer. </p>"},{"location":"introduction/mapserver/#interacting-with-mapserver","title":"Interacting with MapServer","text":"<p>Before services like WMS and WFS were added to MapServer, interaction was done using the custom keywords listed on the MapServer CGI Controls page.These are still available for use in MapServer, but this workshop will focus on OGC services. For example we will use the WMS protocol to display the MapServer layer on top of an OSM background using OpenLayers.</p>"},{"location":"introduction/openlayers/","title":"OpenLayers","text":"<p>MapServer runs on a server and publishes data via web services. You can view this data on the command line or in a browser by creating URLs, but it is usually accessed through a client application.</p> <p>This could be a desktop GIS like QGIS or ArcGIS Pro, or through a web browser using a JavaScript mapping library like Leaflet or OpenLayers.</p> <p>This workshop uses OpenLayers for the exercises because it supports many OGC standards published by MapServer and is an OSGeo project like MapServer.</p> <p></p> <p>To complete the exercises, you will need to edit some HTML and JavaScript code, but it will be simple enough that no prior experience in these languages is required.</p> <p>A useful introduction to OpenLayers can be found here.</p>"},{"location":"introduction/openlayers/#html-example-pages","title":"HTML example pages","text":"<p>The HTML pages are served using a Docker container, and when the containers are running an index page for all workshop exercises is available at http://localhost:7001/. </p> <p>The HTML files used in the workshop are located in <code>exercises/app</code>. The JavaScript files can be found in <code>exercises/app/js</code>. These files can be edited, and changes viewed in the browser. </p> <p>To display MapServer WMS services we use an ImageLayer with a ImageWMS source.</p> <p>These are created as follows:</p> <pre><code>new ImageLayer({\n    source: new ImageWMS({\n        url: mapserverUrl + mapfilesPath + 'points.map&amp;',\n        params: { 'LAYERS': 'pois', 'STYLES': '' }\n    }),\n}),\n</code></pre> <p>The <code>LAYERS</code>parameter can be set to the Mapfile <code>MAP NAME</code> to show all layers, or you can add individual layers using a comma-separated list of <code>LAYER NAME</code>.</p>"},{"location":"introduction/openlayers/#wms","title":"WMS","text":"<p>We use the WMS protocol to serve out data. To configure this in our Mapfiles we need to include the following <code>WEB</code> block:</p> <pre><code>WEB\n    METADATA\n        ows_enable_request \"*\" # this enables all OGC protocols supported by MapServer\n        ows_srs \"EPSG:4326 EPSG:3857\" # we ensure Web Mercator is available as this is the projection we use in our OL maps\n    END\nEND\n</code></pre>"},{"location":"introduction/openlayers/#centres-and-extents","title":"Centres and Extents","text":"<p>In our OpenLayers maps we often want to set a starting extent or centre for the map. If our Mapfile contains an EXTENT in a different projection we can use the GDAL programs installed on the Docker image to convert coordinates to the OpenLayers projection:</p> <pre><code># connect to the Docker image\ndocker exec -it mapserver /bin/bash\n\n# convert the bottom-left coordinate from EPSG:4326 to EPSG:3857\necho \"26.668 58.339\" | gdaltransform -s_srs EPSG:4326 -t_srs EPSG:3857\n# same for the top-right coordinate\necho \"26.796 58.409\" | gdaltransform -s_srs EPSG:4326 -t_srs EPSG:3857\n\n# to calculate centres we can use simple maths and Python\n# centre X (longitude)\npython -c \"print((26.668 + 26.796) / 2)\"\n# centre Y (latitude)\npython -c \"print((58.339 + 58.409) / 2)\"\n</code></pre>"},{"location":"mapfile/labels/","title":"Labels","text":""},{"location":"mapfile/labels/#overview","title":"Overview","text":"<p>In this exercises we'll look at labelling features in a map. We'll be using a lakes dataset from the original Itasca County, Minnesota MapServer demo.</p>"},{"location":"mapfile/labels/#labels_1","title":"Labels","text":"<p>LABELs are placed within a <code>CLASS</code>.  Each class can label features differently.</p> <p>Here is the <code>LABEL</code> block used in our example:</p> <pre><code>LABEL\n    COLOR 255 255 255\n    TEXT (initcap(\"[LAKE_NAME]\"))\n    TYPE TRUETYPE \n    FONT LiberationMono\n    SIZE 12\n    PARTIALS FALSE\n    POSITION CC\n    FORCE TRUE\n    ANGLE FOLLOW\nEND\n</code></pre>"},{"location":"mapfile/labels/#label-positions","title":"Label Positions","text":"<p>We use the centerline function as part of a GEOMTRANSFORM expression:</p> <pre><code>GEOMTRANSFORM (centerline(densify([shape], 0.1)))\n</code></pre>"},{"location":"mapfile/labels/#code","title":"Code","text":"<p>Example</p> <ul> <li>Direct MapServer request: http://localhost:7000/?map=/etc/mapserver/lakes.map&amp;mode=map&amp;layer=lakes&amp;layer=lake-labels</li> <li>Local OpenLayers example: http://localhost:7001/lakes.html</li> </ul> lakes.js <pre><code>import '../css/style.css';\nimport ImageWMS from 'ol/source/ImageWMS.js';\nimport Map from 'ol/Map.js';\nimport OSM from 'ol/source/OSM.js';\nimport View from 'ol/View.js';\nimport { Image as ImageLayer, Tile as TileLayer } from 'ol/layer.js';\n\nconst mapserverUrl = import.meta.env.VITE_MAPSERVER_BASE_URL;\nconst mapfilesPath = import.meta.env.VITE_MAPFILES_PATH;\n\nconst layers = [\n    new TileLayer({\n        source: new OSM(),\n        visible: false\n    }),\n    new ImageLayer({\n        //extent: [-10511673.608284535, 5945083.891031924, -10359446.890274443, 6088408.054427299],\n        source: new ImageWMS({\n            url: mapserverUrl + mapfilesPath + 'lakes.map&amp;',\n            params: { 'LAYERS': 'lakes,lake-labels', 'STYLES': '' },\n            ratio: 1\n        }),\n    }),\n];\n\nconst map = new Map({\n    layers: layers,\n    target: 'map',\n    view: new View({\n        center: [-10405560, 6011045],\n        zoom: 11,\n    }),\n});\n</code></pre> lakes.map <pre><code>MAP\n    NAME \"ItascaLakes\"\n    EXTENT 393234.3937012631 5208170.531190613 495403.1713263091 5303964.876754144\n    SIZE 800 600\n    PROJECTION\n        \"init=epsg:26915\"\n    END\n    FONTSET \"data/fonts/fontset.txt\"    \n    WEB\n        METADATA\n            \"ows_enable_request\" \"*\" \n            \"ows_srs\" \"EPSG:4326 EPSG:3857\" \n        END\n    END\n    LAYER\n        NAME \"lakes\"\n        STATUS OFF\n        TYPE POLYGON\n        CONNECTIONTYPE OGR\n        CONNECTION \"data/itasca/lakespy2.shp\"\n        PROCESSING \"NATIVE_FILTER=LAKE_NAME!=''\"\n        CLASS\n            NAME \"Lakes &amp; Rivers\"\n            STYLE\n                COLOR 49 117 185\n            END\n        END\n    END\n    LAYER\n        NAME \"lake-labels\"\n        STATUS OFF\n        TYPE LINE\n        CONNECTIONTYPE OGR\n        CONNECTION \"data/itasca/lakespy2.shp\"\n        GEOMTRANSFORM (centerline([shape]))\n        # workaround for https://github.com/MapServer/MapServer/issues/7058\n        PROCESSING \"NATIVE_FILTER=FID NOT IN (127, 1112)\"\n        CLASS\n            LABEL\n                COLOR 255 255 255\n                TEXT (initcap(\"[LAKE_NAME]\"))\n                TYPE TRUETYPE \n                FONT LiberationMono\n                SIZE 12\n                PARTIALS FALSE\n                POSITION CC\n                FORCE TRUE\n                ANGLE FOLLOW\n            END\n        END\n    END\nEND\n</code></pre>"},{"location":"mapfile/labels/#exercises","title":"Exercises","text":"<ol> <li>Use a different font for the label by adding the following to the <code>LABEL</code> block: <code>FONT MonsieurLaDoulaise</code> and increasing the <code>SIZE</code> to <code>28</code>.    The list of fonts available can be found in <code>workshop/exercises/mapfiles/data/fonts/fontset.txt</code>.</li> <li>Comment out the <code>GEOMTRANSFORM (centerline([shape]))</code> and <code>ANGLE FOLLOW</code> lines (using <code>#</code>) to see its effect on the map.</li> <li>If you have time, download a font you like from https://fonts.google.com/ and unzip the .TTF file to <code>workshop/exercises/mapfiles/data/fonts/</code>    add a new entry to <code>fontset.txt</code> and use this font to draw your Map labels.</li> </ol>"},{"location":"mapfile/lines/","title":"Line Styling","text":""},{"location":"mapfile/lines/#overview","title":"Overview","text":"<p>In this exercise we're going to display the road network from OpenStreetMap for Tartu, Estonia - the host city for FOSS4G Europe 2024 where this workshop was first given. </p> <p>The diagram below shows the Mapfile directives used for the map:</p> <p></p>"},{"location":"mapfile/lines/#layers","title":"Layers","text":"<p>A MapServer LAYER represents a dataset that will be displayed in your map. In this example we have a single \"roads\" layer, defined below:</p> <pre><code>LAYER\n  NAME \"roads\"\n  TYPE LINE\n  STATUS OFF\n  ...\n</code></pre> <p>Key attributes for the layer are:</p> <ul> <li>the NAME is used by client applications to refer to the <code>LAYER</code> and should be unique.</li> <li>the STATUS is a slightly confusing property. When we use a client application such as OpenLayers, we want to set this to <code>OFF</code> and let the client request layers. A <code>STATUS</code> of <code>default</code> means the layer will always be visible whether the client requests it or not.</li> <li>all layers have a TYPE which decides how the layer should be drawn. We use a simple <code>LINE</code> type to display the roads.</li> </ul>"},{"location":"mapfile/lines/#data-sources","title":"Data Sources","text":"<p>To define the data for the layer we need to set the DATA property:</p> <pre><code>LAYER\n  ...\n  CONNECTIONTYPE FLATGEOBUF\n  DATA \"data/osm/roads.fgb\"\n</code></pre> <p>MapServer can display many different vector formats. In this case we are pointing to a FlatGeobuf file on disk so we set the CONNECTIONTYPE to FLATGEOBUF. FlatGeobuf can be simpler to use than Shapefiles, as they are a single file and don't have any restrictions on attribute names. </p> <p>The path to the <code>roads.fgb</code> is added to the <code>DATA</code> property and is relative to the Mapfile. </p>"},{"location":"mapfile/lines/#styling","title":"Styling","text":"<p>In this example all roads will be in the same <code>CLASS</code> and displayed in a single <code>STYLE</code>:</p> <pre><code>CLASS\n  STYLE\n    COLOR 50 50 50\n  END\nEND\n</code></pre>"},{"location":"mapfile/lines/#code","title":"Code","text":"<p>Example</p> <ul> <li>Direct MapServer request: http://localhost:7000/?map=/etc/mapserver/lines.map&amp;mode=map&amp;layer=roads</li> <li>Local OpenLayers example: http://localhost:7001/lines.html</li> </ul> <p>Tip</p> <p>Note the layer name in <code>layer=roads</code> is case-sensitive and had to match the LAYER NAME in the Mapfile exactly.</p> lines.js <pre><code>import '../css/style.css';\nimport ImageWMS from 'ol/source/ImageWMS.js';\nimport Map from 'ol/Map.js';\nimport View from 'ol/View.js';\nimport { Image as ImageLayer } from 'ol/layer.js';\n\nconst mapserverUrl = import.meta.env.VITE_MAPSERVER_BASE_URL;\nconst mapfilesPath = import.meta.env.VITE_MAPFILES_PATH;\n\nconst layers = [\n    new ImageLayer({\n        extent: [2968743.65508978, 8038921.67212233, 2982981.8632402, 8053818.05714347],\n        source: new ImageWMS({\n            url: mapserverUrl + mapfilesPath + 'lines.map&amp;',\n            params: { 'LAYERS': 'roads', 'STYLES': '' },\n            ratio: 1\n        }),\n    }),\n];\nconst map = new Map({\n    layers: layers,\n    target: 'map',\n    view: new View({\n        center: [2975862.75916499, 8046369.8646329],\n        zoom: 14,\n    }),\n});\n</code></pre> lines.map <pre><code>MAP\n  NAME \"Roads\"\n  EXTENT 26.668678 58.339241 26.796582 58.409410\n  SIZE 800 600\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    METADATA\n      \"ows_enable_request\" \"*\"\n      \"ows_srs\" \"EPSG:4326 EPSG:3857\"\n    END\n  END\n\n  LAYER\n    NAME \"roads\"\n    TYPE LINE\n    STATUS OFF    \n    CONNECTIONTYPE FLATGEOBUF\n    DATA \"data/osm/roads.fgb\"\n    CLASS\n      STYLE\n        COLOR 50 50 50\n      END\n    END\n  END\nEND\n</code></pre>"},{"location":"mapfile/lines/#exercises","title":"Exercises","text":"<ol> <li>Change the <code>STYLE</code> to use a different RGB colour. </li> <li>Add a WIDTH property to the <code>STYLE</code>.</li> <li>Add a second <code>STYLE</code> block to the <code>CLASS</code>, but use a larger width to create stacked lines. Styles are drawn in the order they appear in the Mapfile.</li> <li>Experiment with adding a PATTERN to the line style for example <code>PATTERN 5 5 END</code>.</li> </ol>"},{"location":"mapfile/points/","title":"A Point Map","text":""},{"location":"mapfile/points/#overview","title":"Overview","text":"<p>In this exercise we'll create a map of POIs (Points of Interest) from OpenStreetMap for Mostar, Bosnia-Herzegovina - the host city for FOSS4G Europe 2025.</p> <p>The diagram below shows the Mapfile directives used for the point map:</p> <p></p>"},{"location":"mapfile/points/#symbols","title":"Symbols","text":"<p>The Mapfile symbolises the points using different SYMBOLs. There are several different symbol TYPEs available in MapServer.</p> <p>A simple circle symbol is defined in the Mapfile as follows:</p> <pre><code>SYMBOL\n    NAME \"circle\"\n    TYPE ELLIPSE\n    FILLED TRUE\n    POINTS\n        1 1\n    END\nEND\n</code></pre> <p>A symbol can also reference a character in a font file using <code>TYPE TRUETYPE</code>. References to different font files are added to a FONTSET.</p>"},{"location":"mapfile/points/#fonts","title":"Fonts","text":"<p>A <code>FONTSET</code> includes an alias for the name of the font, and the path to the font file itself. This workshop uses the following <code>fontset.txt</code> file (found in <code>workshop/exercises/mapfiles/data/fonts/fontset.txt</code>):</p> <pre><code># Alias                # Font file\nMaterialIcons          MaterialIcons-Regular.ttf\nMaterialIconsRound     MaterialIconsRound-Regular.otf\nLiberationMono         LiberationMono-Regular.ttf\nLiberationSans         LiberationSans-Regular.ttf\n</code></pre> <p>In the Mapfile itself we then reference this file and use any of the font aliases for symbols and labels. </p> <p>In the example below we're using a cinema character from Google's Material Symbols. We use HTML entity number of the symbol we want in the CHARACTER keyword. A list of these codes and their associated symbols can be seen at http://localhost:7001/fonts.html.</p> <pre><code>FONTSET \"data/fonts/fontset.txt\"\nSYMBOL\n    NAME \"cinema\"\n    TYPE TRUETYPE\n    FONT \"MaterialIcons\"\n    CHARACTER \"&amp;#57388;\"\nEND\n</code></pre>"},{"location":"mapfile/points/#code","title":"Code","text":"<p>Example</p> <ul> <li>Direct MapServer request: http://localhost:7000/?map=/etc/mapserver/points.map&amp;mode=map&amp;layer=pois</li> <li>Local OpenLayers example: http://localhost:7001/points.html</li> </ul> points.js <pre><code>import '../css/style.css';\nimport ImageWMS from 'ol/source/ImageWMS.js';\nimport Map from 'ol/Map.js';\nimport OSM from 'ol/source/OSM.js';\nimport View from 'ol/View.js';\nimport { Image as ImageLayer, Tile as TileLayer } from 'ol/layer.js';\n\nconst mapserverUrl = import.meta.env.VITE_MAPSERVER_BASE_URL;\nconst mapfilesPath = import.meta.env.VITE_MAPFILES_PATH;\n\nconst layers = [\n    new TileLayer({\n        source: new OSM(),\n        visible: false\n    }),\n    new ImageLayer({\n            source: new ImageWMS({\n            url: mapserverUrl + mapfilesPath + 'points.map&amp;',\n            params: { 'LAYERS': 'pois', 'STYLES': '' }\n        }),\n    }),\n];\nconst map = new Map({\n    layers: layers,\n    target: 'map',\n    view: new View({\n        center: [1982884, 5363834],\n        zoom: 14,\n    }),\n});\n</code></pre> points.map <pre><code>MAP\n    NAME \"Points\"\n    EXTENT 17.77 43.31 17.83 43.36\n    SIZE 800 600\n    PROJECTION\n        \"init=epsg:4326\"\n    END\n    FONTSET \"data/fonts/fontset.txt\"\n    WEB\n        METADATA\n            \"wms_enable_request\" \"*\"\n            \"wms_srs\" \"EPSG:4326 EPSG:3857\"\n            \"wms_onlineresource\" \"http://localhost:7000/?map=/etc/mapserver/points.map&amp;\"\n        END\n    END\n    SYMBOL\n        NAME \"circle\"\n        TYPE ELLIPSE\n        FILLED TRUE\n        POINTS\n            1 1\n        END\n    END\n    SYMBOL\n        NAME \"cinema\"\n        TYPE TRUETYPE\n        FONT \"MaterialIcons\"\n        CHARACTER \"&amp;#57388;\"\n    END\n    SYMBOL\n        NAME \"local_library\"\n        TYPE TRUETYPE\n        FONT \"MaterialIcons\"\n        CHARACTER \"&amp;#58699;\"\n    END\n    SYMBOL\n        NAME \"storefront\"\n        TYPE TRUETYPE\n        FONT \"MaterialIcons\"\n        CHARACTER \"&amp;#59922;\"\n    END\n    # A MAP can have one or more layers, configured\n    # using LAYER blocks\n    LAYER\n        NAME \"pois\"\n        STATUS ON\n        TYPE POINT # each LAYER must have a TYPE such as POINT, LINE, or POLYGON\n        CONNECTIONTYPE FLATGEOBUF\n        DATA \"data/osm/mostar/pois.fgb\"\n        CLASSITEM \"fclass\"\n        # data within a LAYER is classified using one or more CLASSes\n        # these use EXPRESSIONs to define which features are assigned to\n        # which CLASS\n        CLASS\n            NAME \"cinema\"\n            EXPRESSION \"cinema\"\n            # we can now STYLE the data in the CLASS using\n            # one or more STYLE blocks\n            STYLE\n                SYMBOL \"cinema\"\n                SIZE 16\n                COLOR 0 0 0\n            END\n        END\n        CLASS\n            NAME \"library\"\n            EXPRESSION \"library\"\n            STYLE\n                SYMBOL \"local_library\"\n                SIZE 16\n                COLOR 0 0 0\n            END\n        END\n        CLASS\n            NAME \"shop\"\n            EXPRESSION {computer_shop,shoe_shop,sports_shop}\n            STYLE\n                SYMBOL \"storefront\"\n                SIZE 16\n                COLOR 0 0 0\n            END\n        END\n        CLASS\n            NAME \"poi\"\n            # when there is no expression any features\n            # that don't match a previous class will be displayed\n            # using this style\n            STYLE\n                SYMBOL \"circle\"\n                SIZE 1\n                COLOR 0 0 0\n            END\n        END # CLASS ends here\n    END # LAYER ends here\nEND # MAP ends here\n</code></pre>"},{"location":"mapfile/points/#exercises","title":"Exercises","text":"<ol> <li>Edit the <code>workshop/exercises/app/js/points.js</code> to show the OpenStreetMap base layer. You need to set the <code>visible: false</code> to <code>visible: true</code>.</li> <li>Change the default <code>CLASS</code> to use larger points in a more visible colour.</li> <li>Add another class to display another point type. Choose an appropriate symbol from the list at http://localhost:7001/fonts.html. Some example attribute types include <code>fast_food</code>, <code>monument</code>, and <code>post_box</code>. The source dataset is <code>workshop/exercises/mapfiles/data/osm/pois.fgb</code> - this can be opened in QGIS to view all available attributes and values. </li> </ol>"},{"location":"mapfile/polygons/","title":"Polygon Styling","text":""},{"location":"mapfile/polygons/#overview","title":"Overview","text":"<p>This exercise displays buildings from OpenStreetMap. </p>"},{"location":"mapfile/polygons/#polygons","title":"Polygons","text":"<p>The buildings are a polygon dataset, so we set our <code>LAYER TYPE</code> to <code>POLYGON</code>:</p> <pre><code>LAYER\n    NAME \"buildings\"\n    TYPE POLYGON\n    ...\n</code></pre> <p>When styling polygons we can set the colour of the polygon, and also its outline color:</p> <pre><code>CLASS\n    ...\n    STYLE\n        COLOR 246 241 223\n        OUTLINECOLOR 0 0 0\n    END\nEND\n</code></pre>"},{"location":"mapfile/polygons/#expressions","title":"Expressions","text":"<p>In this Mapfile we have two different classes for the dataset.</p> <p>The first class has an EXPRESSION that limits  which features will be drawn. This compares the value for the \"type\" field for each feature with \"university\". If there is a match then the feature is drawn with the <code>STYLE</code>s from the <code>CLASS</code>.</p> <pre><code>CLASS\n    GROUP \"university\"\n    EXPRESSION ( \"[type]\" = \"university\" )\n...\n</code></pre>"},{"location":"mapfile/polygons/#code","title":"Code","text":"<p>Example</p> <ul> <li>Direct MapServer request: http://localhost:7000/?map=/etc/mapserver/polygons.map&amp;mode=map&amp;layer=buildings</li> <li>Local OpenLayers example: http://localhost:7001/polygons.html</li> </ul> <p>Tip</p> <p>A LAYER has a CONNECTIONTYPE that is used to connect to different data sources. The connection types are \"native\" - when the reading of the data is handled by MapServer code. The OGR connection type uses GDAL/OGR to read data sources. For some data types, as in the flatgeobuf example used here, there is an option to use either a native connection or an OGR connection.</p> <p>There is also a PLUGIN connection type to allow connections to MS SQL Server and Oracle databases.</p> <pre><code>CONNECTIONTYPE OGR\n# CONNECTIONTYPE FLATGEOBUF\n# DATA \"data/osm/buildings_a.fgb\"\nCONNECTION \"data/osm/buildings_a.fgb\"\n</code></pre> polygons.js <pre><code>import '../css/style.css';\nimport ImageWMS from 'ol/source/ImageWMS.js';\nimport Map from 'ol/Map.js';\nimport OSM from 'ol/source/OSM.js';\nimport View from 'ol/View.js';\nimport { Image as ImageLayer, Tile as TileLayer } from 'ol/layer.js';\n\nconst mapserverUrl = import.meta.env.VITE_MAPSERVER_BASE_URL;\nconst mapfilesPath = import.meta.env.VITE_MAPFILES_PATH;\n\nconst layers = [\n    new TileLayer({\n        source: new OSM(),\n    }),\n    new ImageLayer({\n        source: new ImageWMS({\n            url: mapserverUrl + mapfilesPath + 'polygons.map&amp;',\n            params: { 'LAYERS': 'buildings', 'STYLES': 'university' },\n            ratio: 1\n        }),\n    }),\n];\nconst map = new Map({\n    layers: layers,\n    target: 'map',\n    view: new View({\n        center: [1982884, 5363834],\n        zoom: 14,\n    }),\n});\n</code></pre> polygons.map <pre><code>MAP\n    NAME \"Buildings\"\n    EXTENT 17.77 43.31 17.83 43.36\n    UNITS DD\n    SIZE 800 600\n    PROJECTION\n        \"init=epsg:4326\"\n    END\n    WEB\n        METADATA\n            \"ows_title\" \"OSM Buildings\" \n            \"ows_enable_request\" \"*\" \n            \"ows_srs\" \"EPSG:4326 EPSG:3857\" \n        END\n    END\n    LAYER\n        NAME \"buildings\"\n        TYPE POLYGON\n        STATUS OFF\n        CONNECTIONTYPE OGR\n        # CONNECTIONTYPE FLATGEOBUF\n        # DATA \"data/osm/mostar/buildings_a.fgb\"\n        CONNECTION \"data/osm/mostar/buildings_a.fgb\"\n        CLASSGROUP \"university\" # we can switch the default set of CLASSes here\n        CLASS\n            NAME \"University\" # this value is used for Legend titles for the CLASS\n            GROUP \"university\"\n            EXPRESSION ( \"[type]\" = \"university\" )\n            STYLE\n                COLOR 255 0 0\n                OUTLINECOLOR 0 0 0\n            END\n        END\n        CLASS\n            NAME \"Other\"\n            GROUP \"other\"\n            STYLE\n                COLOR 246 241 223\n                OUTLINECOLOR 0 0 0\n            END\n        END\n    END\nEND\n</code></pre>"},{"location":"mapfile/polygons/#exercises","title":"Exercises","text":"<ol> <li> <p>Switch the <code>CLASSGROUP</code> in the Mapfile to see different styles. There are two groups <code>university</code> and <code>other</code>.</p> <pre><code>LAYER\n    NAME \"buildings\"\n    ...\n    CLASSGROUP \"university\" # can switch the default set of CLASSes here\n</code></pre> </li> <li> <p>Switch the style used in the <code>polygon.js</code> file from <code>university</code> to <code>other</code>:</p> <pre><code>source: new ImageWMS({\n    url: mapserverUrl + mapfilesPath + 'polygons.map&amp;',\n    params: { 'LAYERS': 'buildings', 'STYLES': 'other' },\n</code></pre> </li> <li> <p>Switch the <code>CONNECTIONTYPE</code> to use the native <code>FLATGEOBUF</code> driver.</p> </li> <li> <p>Experiment with styling the polygons. <code>WIDTH</code> can be used to change the width of the polygon outline. There are more examples    at Cartographical Symbol Construction with MapServer.</p> </li> </ol>"},{"location":"outputs/ogcapi-features/","title":"OGC API - Features","text":""},{"location":"outputs/ogcapi-features/#overview","title":"Overview","text":"<p>In this exercise we'll be configuring MapServer to serve out data using MapServer's OGC API - Features. See the OGC API - Features Overview page for more details.</p>"},{"location":"outputs/ogcapi-features/#configuring-your-mapfile","title":"Configuring your Mapfile","text":"<p>As with other OGC services most configuration is done using <code>METADATA</code> blocks.  The prefix for the OGC API - Features metadata settings is <code>oga_</code>.</p> <p>To enable the OGC API - Features enable it in the <code>WEB</code> <code>METADATA</code>, using either <code>ows_enable_request</code> or <code>oga_enable_request</code>. We also need to set the <code>oga_onlineresource</code> value to the root of the service:</p> <pre><code>WEB\n    METADATA\n        ...\n        ows_enable_request \"*\" # this enables all OGC requests\n        oga_onlineresource \"/ogcapi-features/ogcapi\"\n    END\nEND\n</code></pre> <p>At the <code>LAYER</code> level <code>gml_featureid</code> needs to refer to field name containing a unique value for each feature.</p> <pre><code>METADATA\n    ...\n    gml_include_items \"all\"\n    gml_featureid \"osm_id\"\nEND\n</code></pre>"},{"location":"outputs/ogcapi-features/#the-mapserver-config-file","title":"The MapServer CONFIG File","text":"<p>In MapServer version 8.0 a new global CONFIG file was added. </p> <p>This allows us to set which URL path is handled by which Mapfile. </p> <p>The file is located at <code>workshop\\exercises\\mapfiles\\mapserver.conf</code> (in the same folder as the Mapfiles), and is read by the Docker container.</p> <p>Tip</p> <p><code>mapserver.conf</code> can be edited, but any changes will only come into effect when Apache is restarted. As this is running in Docker, we restart the Docker <code>mapserver</code> container:</p> <pre><code>docker restart mapserver\n</code></pre> <p>The key part of the <code>CONFIG</code> file are the <code>MAPS</code> section where a URL paths are paired with Mapfiles:</p> <pre><code>  MAPS\n    OGCFEATURES \"/etc/mapserver/ogcapi-features.map\"\n  END\n</code></pre> <p>The other relevant setting is the environment variable <code>OGCAPI_HTML_TEMPLATE_DIRECTORY</code> in the <code>ENV</code> section. This points to a folder containing templates used to create the HTML interface when browsing the OGC API - Features: </p> <pre><code>ENV\n    OGCAPI_HTML_TEMPLATE_DIRECTORY \"/usr/local/share/mapserver/ogcapi/templates/html-bootstrap4/\"\nEND\n</code></pre>"},{"location":"outputs/ogcapi-features/#browsing-the-ogc-api-features-collections","title":"Browsing the OGC API - Features Collections","text":"<p>The OGC API - Features can be viewed as HTML pages, which are rendered using templates provided by MapServer. They can also be accessed as JSON. </p> <p>The services use hierarchical URLs for example:</p> <ul> <li>The root of the service is at http://localhost:7000/ogcapi-features/ogcapi/</li> <li>The feature collections are listed at http://localhost:7000/ogcapi-features/ogcapi/collections?f=html</li> <li>The Polygon feature collection is available at http://localhost:7000/ogcapi-features/ogcapi/collections/pois_polygon?f=html</li> </ul>"},{"location":"outputs/ogcapi-features/#adding-ogc-api-features-to-openlayers","title":"Adding OGC API - Features to OpenLayers","text":"<p>As the OGC API - Features returns GeoJSON, adding a vector layer to OpenLayers is straightforward. We simply pass in the URL pointing to the collection items:</p> <pre><code>new VectorLayer({\n    style: {\n        'fill-color': 'rgba(255, 255, 0, 0.7)',\n        'stroke-width': 1.3,\n    },\n    source: new Vector({\n        url: mapserverUrl + 'ogcapi-features/ogcapi/collections/pois_polygon/items?f=json&amp;limit=500',\n        format: new GeoJSON(),\n    }),\n}),\n</code></pre>"},{"location":"outputs/ogcapi-features/#code","title":"Code","text":"<p>Example</p> <ul> <li>Direct MapServer request: http://localhost:7000/ogcapi-features/ogcapi/</li> <li>Direct MapServer request: http://localhost:7000/ogcapi-features/ogcapi/collections/pois/items?f=html </li> <li>Local OpenLayers example: http://localhost:7001/ogcapi-features.html</li> </ul> ogcapi-features.js <pre><code>import '../css/style.css';\nimport Vector from 'ol/source/Vector.js';\nimport Map from 'ol/Map.js';\nimport GeoJSON from 'ol/format/GeoJSON.js';\nimport OSM from 'ol/source/OSM.js';\nimport View from 'ol/View.js';\nimport { Vector as VectorLayer, Tile as TileLayer } from 'ol/layer.js';\n\nconst mapserverUrl = import.meta.env.VITE_MAPSERVER_OGC_BASE_URL;\n\nconst layers = [\n    new TileLayer({\n        source: new OSM(),\n    }),\n    new VectorLayer({\n        style: {\n            'fill-color': 'rgba(255, 255, 0, 0.7)',\n            'stroke-width': 1.3,\n        },\n        source: new Vector({\n            url: mapserverUrl + 'ogcapi-features/ogcapi/collections/pois_polygon/items?f=json&amp;limit=500',\n            format: new GeoJSON(),\n        }),\n    }),\n];\nconst map = new Map({\n    layers: layers,\n    target: 'map',\n    view: new View({\n        center: [1982884, 5363834],\n        zoom: 13,\n    }),\n});\n</code></pre> ogcapi-features.map <pre><code>MAP\n  NAME \"OGC API - Features\"\n  EXTENT 17.77 43.31 17.83 43.36\n  UNITS DD\n  SIZE 600 600\n\n  PROJECTION\n    \"init=epsg:4326\"\n  END\n\n  WEB\n    METADATA\n      \"ows_title\" \"OSM Features\"\n      \"ows_enable_request\" \"*\" # this enables all OGC requests\n      \"ows_srs\" \"EPSG:4326 EPSG:3857\"\n      \"oga_onlineresource\" \"/ogcapi-features/ogcapi\"\n      # \"oga_html_template_directory\"\n      # \"oga_enable_request\" \"*\"\n    END\n  END\n\n  LAYER\n    NAME \"pois\"\n    STATUS OFF\n    TYPE POINT\n    TEMPLATE \"void\"\n\n    METADATA\n      \"ows_title\" \"Point POIs\"\n      \"gml_include_items\" \"all\"\n      \"gml_featureid\" \"osm_id\"\n    END\n    CONNECTIONTYPE OGR\n    CONNECTION \"data/osm/mostar/pois.fgb\"\n  END\n\n  LAYER\n    NAME \"pois_polygon\"\n    STATUS OFF\n    TYPE POLYGON\n    TEMPLATE \"void\"\n\n    METADATA\n      \"ows_title\" \"Polygon POIs\"\n      \"gml_include_items\" \"all\"\n      \"gml_featureid\" \"osm_id\"\n    END\n    CONNECTIONTYPE OGR\n    CONNECTION \"data/osm/mostar/pois_a.fgb\"\n  END\n\nEND\n</code></pre>"},{"location":"outputs/ogcapi-features/#exercises","title":"Exercises","text":"<ol> <li> <p>Modify the <code>workshop\\exercises\\mapfiles\\railways.map</code> to enable the OGC API - Features. You will need to add a new entry to the <code>MAPS</code> section in <code>workshop\\exercises\\mapfiles\\mapserver.conf</code> and restart the Docker container to be able to browse the OGC API - Features interface. </p> <pre><code>MAPS\n    ...\n    RAILWAYS \"/etc/mapserver/railways.map\"\nEND\n</code></pre> <p>You also need to add the following to <code>WEB</code> <code>METADATA</code> so MapServer can correctly construct the URLs: <code>\"oga_onlineresource\" \"/railways/ogcapi\"</code></p> <p>Tip</p> <p>You need to add <code>TEMPLATE \"void\"</code> to each of the layers you want to make available through the OGC API - Features.  TEMPLATE is a left-over from when HTML templates were used to return features, and allows the layer to be queried. </p> <p>Once setup correctly you should be able to browse the OGC API - Features at http://localhost:7000/railways/ogcapi/.</p> </li> </ol>"},{"location":"outputs/ogcapi-features/#possible-errors","title":"Possible Errors","text":"<ul> <li> <pre><code>{\n    \"code\": \"ConfigError\",\n    \"description\": \"InjaError error. [inja.exception.file_error] failed accessing file at '/etc/mapserver/landing.html' (landing.html). (/etc/mapserver/).\"\n}\n</code></pre> <p><code>oga_html_template_directory</code> can be set either at the Mapfile level or in the CONFIG file. Mapfile takes precedence. </p> </li> </ul>"},{"location":"outputs/tiles/","title":"Image Tiles","text":""},{"location":"outputs/tiles/#overview","title":"Overview","text":"<p>MapServer can serve out image tiles using Tile Mode. This example uses a countries dataset from Natural Earth. </p> <p>Tiles will always be in the Web Mercator (<code>EPSG:3857</code>) projection, and can easily be added to client JavaScript applications such as OpenLayers and Leaflet. Tiles are also easy to cache using software such as MapCache.</p>"},{"location":"outputs/tiles/#mapfile-notes","title":"Mapfile Notes","text":"<p>There are no specific changes required to allow Mapfile layers to be accessed using Tile Mode. However there are some <code>METADATA</code> settings that can be used to configure tile mode. See tile mode configuration in the docs.</p> <pre><code>WEB\n    METADATA\n        \"tile_map_edge_buffer\" \"10\"\n        \"tile_metatile_level\" \"0\"\n    END\nEND\n</code></pre> <p>Tip</p> <p>It is good practice to always set a <code>PROJECTION</code> block on the <code>LAYER</code> - even if it is in the same projection as the <code>MAP</code>.     </p>"},{"location":"outputs/tiles/#requesting-tiles-in-openlayers","title":"Requesting Tiles in OpenLayers","text":"<p>A TileLayer is simple to add to an OpenLayers map. We simply provide a template URL as the XYZ source, and add <code>&amp;MODE=tile</code>:</p> <pre><code>new TileLayer({\n    source: new XYZ({\n        url: mapserverUrl + mapfilesPath + 'tiles.map&amp;MODE=tile&amp;TILE={x}+{y}+{z}&amp;LAYERS=countries',\n    }),\n}),\n</code></pre>"},{"location":"outputs/tiles/#code","title":"Code","text":"<p>Example</p> <ul> <li>Direct MapServer request: http://localhost:7000/?map=/etc/mapserver/points.map&amp;mode=map&amp;layer=pois</li> <li>MapServer request: http://localhost:7000/?map=/etc/mapserver/tiles.map&amp;MODE=tile&amp;TILE=0+0+0&amp;LAYERS=countries&amp;TILEMODE=gmap</li> <li>Local OpenLayers example: http://localhost:7001/tiles.html</li> </ul> tiles.js <pre><code>import '../css/style.css';\nimport Map from 'ol/Map.js';\nimport TileLayer from 'ol/layer/Tile.js';\nimport View from 'ol/View.js';\nimport XYZ from 'ol/source/XYZ.js';\n\nconst mapserverUrl = import.meta.env.VITE_MAPSERVER_BASE_URL;\nconst mapfilesPath = import.meta.env.VITE_MAPFILES_PATH;\n\nconst map = new Map({\n    target: 'map',\n    layers: [\n        new TileLayer({\n            source: new XYZ({\n                url: mapserverUrl + mapfilesPath + 'tiles.map&amp;MODE=tile&amp;TILE={x}+{y}+{z}&amp;LAYERS=countries',\n            }),\n        }),\n    ],\n    view: new View({\n        center: [-472202, 7530279],\n        zoom: 3,\n    }),\n});\n</code></pre> tiles.map <pre><code>MAP\n    NAME \"Tiles\"\n    EXTENT -20037508.34 -20048966.1 20037508.34 20048966.1\n    PROJECTION\n        \"init=epsg:3857\"\n    END\n    SIZE 256 256\n    WEB\n        METADATA\n            \"tile_map_edge_buffer\" \"10\"\n            \"tile_metatile_level\" \"0\"\n        END\n    END\n    IMAGECOLOR \"#ADD8E6\"\n    LAYER\n        NAME \"countries\"\n        TYPE POLYGON\n        STATUS OFF\n        CONNECTIONTYPE FLATGEOBUF\n        DATA \"data/naturalearth/ne_110m_admin_0_countries.fgb\"\n        EXTENT -180.0 -90.0 180.0 90\n        PROJECTION\n            \"init=epsg:4326\"\n        END\n        CLASS\n            STYLE\n                COLOR 60 179 113\n                OUTLINECOLOR 255 255 255\n                OUTLINEWIDTH 0.1\n            END\n            #LABEL\n            #    TEXT \"[name]\"\n            #END\n        END\n    END\nEND\n</code></pre>"},{"location":"outputs/tiles/#exercises","title":"Exercises","text":"<ol> <li>Change the background colour of the <code>MAP</code> and tiles by modifying the <code>IMAGECOLOR \"#ADD8E6\"</code> setting. #ADD8E6   is \"LightBlue\".</li> <li> <p>Uncomment the <code>LABEL</code> block in the Mapfile to add labels to the tiles. You will notice that the country names are repeated several times, as they are shown for each tile. Try setting the <code>tile_metatile_level</code> value to \"1\" and then \"2\". This will reduce label repetition, but take longer to render. </p> <pre><code>METADATA\n    \"tile_map_edge_buffer\" \"10\"\n    \"tile_metatile_level\" \"0\"\nEND\n</code></pre> </li> </ol>"},{"location":"outputs/tiles/#possible-errors","title":"Possible Errors","text":"<ul> <li> <pre><code>\"mapserv(): Web application error. No way to generate map extent. \"\n</code></pre> <p>Resolution: ensure the parameter order in the JS client is in the format <code>&amp;TILE={x}+{y}+{z}&amp;LAYERS</code>. Other tile services often use the zoom level as the first parameter, for example <code>{z}/{x}/{y}</code>.</p> </li> </ul>"},{"location":"outputs/vector-tiles/","title":"Vector Tiles","text":""},{"location":"outputs/vector-tiles/#overview","title":"Overview","text":"<p>This example displays Mapbox Vector Tiles for a simplified countries dataset from Natural Earth. </p>"},{"location":"outputs/vector-tiles/#mapfile-configuration","title":"Mapfile Configuration","text":"<p>The Mapbox Vector Tile (MVT) output format is available by default in MapServer, and so no particular changes are required in a Mapfile to serve vector tiles.</p>"},{"location":"outputs/vector-tiles/#adding-vector-tiles-to-openlayers","title":"Adding Vector Tiles to OpenLayers","text":"<p>There are two ways to request vector tiles from MapServer: </p> <ol> <li> <p>Using Tile Mode, as in the Image Tiles example. The only change is to add <code>&amp;map.imagetype=mvt</code> to the request string.</p> </li> <li> <p>Using a WMS interface, and adding the following to the request strings - <code>&amp;FORMAT=application/x-protobuf</code>.</p> </li> </ol> <p>In this example we are are using the tile mode approach, based on the OpenLayers vector tile example. We supply a template URL, and make sure we include <code>&amp;map.imagetype=mvt</code> as part of the querystring:</p> <pre><code>new VectorTileLayer({\n    source: new VectorTileSource({\n        format: new MVT(),\n        url:\n            mapserverUrl + mapfilesPath + 'vector-tiles.map&amp;MODE=tile&amp;TILE={x}+{y}+{z}&amp;LAYERS=countries&amp;map.imagetype=mvt',\n    }),\n    style: function (feature) {\n        return new Style({\n            stroke: new Stroke({\n                color: 'rgb(66, 133, 244)', // Light blue border color\n                width: 2, // Border width\n            })\n        });\n    },\n}),\n</code></pre>"},{"location":"outputs/vector-tiles/#code","title":"Code","text":"<p>Example</p> <ul> <li>Local OpenLayers example: http://localhost:7001/vector-tiles.html</li> </ul> vector-tiles.js <pre><code>import '../css/style.css';\nimport MVT from 'ol/format/MVT.js';\nimport Map from 'ol/Map.js';\nimport VectorTileLayer from 'ol/layer/VectorTile.js';\nimport VectorTileSource from 'ol/source/VectorTile.js';\nimport View from 'ol/View.js';\nimport { Fill, Stroke, Style } from 'ol/style.js';\n\n// https://openlayers.org/en/latest/examples/mapbox-vector-tiles.html\n\nconst mapserverUrl = import.meta.env.VITE_MAPSERVER_BASE_URL;\nconst mapfilesPath = import.meta.env.VITE_MAPFILES_PATH;\n\nconst map = new Map({\n    layers: [\n        new VectorTileLayer({\n            source: new VectorTileSource({\n                format: new MVT(),\n                url:\n                    mapserverUrl + mapfilesPath + 'vector-tiles.map&amp;MODE=tile&amp;TILE={x}+{y}+{z}&amp;LAYERS=countries&amp;map.imagetype=mvt',\n            }),\n            style: function (feature) {\n                return new Style({\n                    stroke: new Stroke({\n                        color: 'rgb(66, 133, 244)', // Light blue border color\n                        width: 2, // Border width\n                    }),\n                    // fill: new Fill({\n                    //    color: 'rgba(66, 133, 244, 0.4)' // semi-transparent blue fill\n                    //})\n                });\n            },\n        }),\n    ],\n    target: 'map',\n    view: new View({\n        center: [-472202, 7530279],\n        zoom: 2,\n    }),\n});\n</code></pre> vector-tiles.map <pre><code>MAP\n    NAME \"Vector Tiles\"\n    EXTENT -20037508.34 -20048966.1 20037508.34 20048966.1\n    SIZE 256 256\n    PROJECTION\n        \"init=epsg:3857\"\n    END\n    LAYER\n        NAME \"countries\"\n        TYPE POLYGON\n        PROJECTION\n            \"init=epsg:4326\"\n        END\n        EXTENT -180.0 -90.0 180.0 90\n        STATUS OFF\n        # If want to include attributes in the tiles add\n        # the METADATA block\n        METADATA\n            \"gml_include_items\" \"all\"\n            \"gml_types\" \"auto\"\n        END\n        CONNECTIONTYPE FLATGEOBUF\n        DATA \"data/naturalearth/ne_110m_admin_0_countries.fgb\"\n    END\nEND\n</code></pre>"},{"location":"outputs/vector-tiles/#exercises","title":"Exercises","text":"<ol> <li>Update the layer to use the <code>data/naturalearth/ne_110m_lakes</code> dataset.</li> <li>Update the OpenLayers style to use a blue fill for the lakes. In the <code>Style</code> function you will need to uncomment the <code>fill</code> JavaScript.    Experiment with different colour values for the <code>fill</code> and <code>stroke</code>.</li> </ol>"},{"location":"outputs/wcs/","title":"Web Coverage Services","text":"<p>TODO</p> <p>https://mapserver.org/ogc/wcs_server.html</p> <p>https://mapserver.org/ogc/wcs_format.html</p> <p>We'll be using WCS 2.0 for this tutorial.</p>"},{"location":"outputs/wcs/#getcapabilities","title":"GetCapabilities","text":"<p>http://localhost:7000/?map=/etc/mapserver/wcs.map&amp;SERVICE=WCS&amp;REQUEST=GetCapabilities</p>"},{"location":"outputs/wcs/#describecoverage-20","title":"DescribeCoverage 2.0","text":"<p>http://localhost:7000/?map=/etc/mapserver/wcs.map&amp;SERVICE=WCS&amp;VERSION=2.0.1&amp;REQUEST=DescribeCoverage&amp;COVERAGEID=dtm</p>"},{"location":"outputs/wcs/#getcoverage-20-imagetiff-full","title":"GetCoverage 2.0 image/tiff full","text":"<p>http://localhost:7000/?map=/etc/mapserver/wcs.map&amp;SERVICE=WCS&amp;VERSION=2.0.1&amp;REQUEST=GetCoverage&amp;COVERAGEID=dtm&amp;FORMAT=image/tiff</p> <pre><code>gdalinfo /etc/mapserver/data/raster/54752_dtm_1m.tif\n</code></pre> <p>NoData Value=-9999 Size is 5002, 5002</p> <p>curl \"http://localhost:7000/?map=/etc/mapserver/wcs.map&amp;SERVICE=WCS&amp;REQUEST=GetCapabilities\"</p> <p>Tip</p> <p>The <code>COVERAGEID</code> will be the <code>LAYER</code> <code>NAME</code></p> <pre><code>msWCSGetCoverage20(): WCS server error. Raster size out of range, width and height of resulting coverage must be no more than MAXSIZE=4096.\n</code></pre> <p>Set the MAXSIZE directive on the <code>MAP</code> to a larger value. By default this is set to 4096.</p> <p>WCS and NULL Values</p> <pre><code>mapserv -nh \"QUERY_STRING=map=test.map&amp;SERVICE=WCS&amp;VERSION=2.0.0&amp;REQUEST=GetCoverage&amp;CoverageId=test&amp;FORMAT=GEOTIFF_INT16&amp;BBOX=-69.955,3.420,-69.701,3.5896&amp;CRS=EPSG:4326&amp;WIDTH=500&amp;HEIGHT=500\" &gt; output2.tif\ngdalinfo output.tif\n</code></pre>"},{"location":"outputs/wfs/","title":"Web Feature Services","text":""},{"location":"outputs/wfs/#overview","title":"Overview","text":"<p>In this exercise we'll create a Mapfile that can be used to serve data as a WFS. We'll be using the \"Populated Places\" from Natural Earth as the data source.</p>"},{"location":"outputs/wfs/#configuring-a-map-for-wfs","title":"Configuring a MAP for WFS","text":"<p>Similar to other OGC services, setting up a Mapfile to serve a WFS uses keywords in <code>METADATA</code> blocks.</p> <p>By default WFS output is XML. We can however configure it to output other formats such as GeoJSON by adding an OUTPUTFORMAT block to the Mapfile:</p> <pre><code>OUTPUTFORMAT\n    NAME \"geojson\"\n    DRIVER \"OGR/GEOJSON\"\n    MIMETYPE \"application/json; subtype=geojson; charset=utf-8\"\n    FORMATOPTION \"FORM=SIMPLE\"\n    FORMATOPTION \"STORAGE=memory\"\n    FORMATOPTION \"LCO:NATIVE_MEDIA_TYPE=application/vnd.geo+json\"\n    FORMATOPTION \"USE_FEATUREID=true\" # ensure GeoJSON output has an id property\nEND\n</code></pre> <p>We then need to add this format to the list of formats returned by the service:</p> <pre><code>WEB\n  METADATA\n    ...\n    \"wfs_getfeature_formatlist\" \"geojson\" # we could also return more complex types such as shapezip\n  END\nEND\n</code></pre> <p>We also need to make sure that any projection requested by a client application is allowed:</p> <pre><code>WEB\n  METADATA\n    ...\n    \"wfs_srs\" \"EPSG:4326 EPSG:3857\"\n    # we can also use ows_ to set these properties for all OWS services\n    # such as WMS, WFS, and WCS\n    # \"ows_srs\" \"EPSG:4326 EPSG:3857\"\n  END\nEND\n</code></pre> <p>See the WFS Server documentation for more details.</p>"},{"location":"outputs/wfs/#configuring-a-layer-for-wfs","title":"Configuring a LAYER for WFS","text":"<p>At the <code>LAYER</code> level there are some additional settings that need to be configured.</p> <p>Tip</p> <p>It is good practice to set an <code>EXTENT</code> on the <code>LAYER</code>. If not set then MapServer tries to calculate this dynamically so it can return the extent in requests such as <code>GetCapabilities</code>. This can dramatically slow down the performance of the layer. </p> <p>We set a unique field name in the <code>METADATA</code> using <code>gml_featureid</code>. Without this not all features may be returned.</p> <p>We also need to configure which feature properties are returned by the service. We can provide a list of field names, or we can use the <code>all</code> keyword to return all properties.</p> <p>We can also manually define the field type for each property, or we can let MapServer calculate these from the source dataset using <code>\"gml_types\" \"auto\"</code>.</p> <pre><code>LAYER\n  ...\n  METADATA\n      \"gml_featureid\" \"ne_id\"\n      \"gml_include_items\" \"all\"\n      \"gml_types\" \"auto\"\n  END\n</code></pre> <p>The <code>METADATA</code> blocks are very flexible, and allow different titles to be applied to the layer for different services, for example:</p> <pre><code>LAYER\n  ...\n  METADATA\n      \"wfs_title\" \"World Cities\"\n      \"wms_title\" \"Cities of the World\"\n      ...\n  END\n</code></pre>"},{"location":"outputs/wfs/#other-mapfile-notes","title":"Other Mapfile Notes","text":"<p>The Mapfile contains a LAYER FILTER to limit the features in the layer. </p> <pre><code>FILTER ([pop_max] &gt; 1000000) # only return places with a population &gt; 1 million\n</code></pre>"},{"location":"outputs/wfs/#requesting-a-wfs-in-openlayers","title":"Requesting a WFS in OpenLayers","text":"<p>In OpenLayers we create a VectorLayer with a VectorSource.  The URL for the layer specifies GeoJSON as the format to use: <code>&amp;outputFormat=geojson</code>. </p> <p>The code used for this example is based on the WFS example. Every time the OpenLayers map is moved a request is made to return features.  <pre><code>const vectorSource = new VectorSource({\n    format: new GeoJSON(),\n    url: function (extent) {\n        const url = mapserverUrl + mapfilesPath + 'wfs.map&amp;service=WFS&amp;' +\n            'version=2.0.0&amp;request=GetFeature&amp;typename=places&amp;' +\n            'outputFormat=geojson&amp;crsName=EPSG:3857&amp;' +\n            'bbox=' +\n            extent.join(',') +\n            ',EPSG:3857';\n        return url;\n    },\n    strategy: bboxStrategy,\n});\n</code></pre></p> <p>As a WFS returns raw features we need to apply styling in the client. In this example we create a function that returns a circle style:</p> <pre><code>function createStyle(feature) {\n    return new Style({\n        image: new CircleStyle({\n            radius: 5 + feature.get('rank_min'),\n            fill: new Fill({\n                color: [255, 153, 0, 0.8],\n            }),\n        }),\n        ...\n    });\n}\n...\n  new VectorLayer({\n      style: createStyle,\n      source: vectorSource\n  }),\n</code></pre>"},{"location":"outputs/wfs/#testing-on-the-command-line","title":"Testing on the Command Line","text":"<p>We can test the Mapfile and WFS responses on the command line as follows:</p> <pre><code>docker exec -it mapserver /bin/bash\nmapserv -nh \"QUERY_STRING=map=/etc/mapserver/wfs.map&amp;service=WFS&amp;version=2.0.0&amp;request=GetFeature&amp;typeName=places&amp;outputFormat=geojson&amp;crsName=EPSG:3857&amp;bbox=-59223902.72157662,-3903081.7252075593,-14974405.131250374,19995821.45447336,EPSG:3857\"\n</code></pre>"},{"location":"outputs/wfs/#code","title":"Code","text":"wfs.js <pre><code>import '../css/style.css';\nimport GeoJSON from 'ol/format/GeoJSON.js';\nimport Map from 'ol/Map.js';\nimport OSM from 'ol/source/OSM.js';\nimport VectorSource from 'ol/source/Vector.js';\nimport View from 'ol/View.js';\nimport {\n    Circle as CircleStyle,\n    Fill,\n    Stroke,\n    Style,\n    Text,\n} from 'ol/style.js';\nimport { Tile as TileLayer, Vector as VectorLayer } from 'ol/layer.js';\nimport { bbox as bboxStrategy } from 'ol/loadingstrategy.js';\n\n// based on the example at https://openlayers.org/en/latest/examples/vector-wfs.html\n\nconst mapserverUrl = import.meta.env.VITE_MAPSERVER_BASE_URL;\nconst mapfilesPath = import.meta.env.VITE_MAPFILES_PATH;\n\nconst vectorSource = new VectorSource({\n    format: new GeoJSON(),\n    url: function (extent) {\n        const url = mapserverUrl + mapfilesPath + 'wfs.map&amp;service=WFS&amp;' +\n            'version=2.0.0&amp;request=GetFeature&amp;typename=places&amp;' +\n            'outputFormat=geojson&amp;crsName=EPSG:3857&amp;' +\n            'bbox=' +\n            extent.join(',') +\n            ',EPSG:3857';\n        console.log(url);\n        return url;\n    },\n    strategy: bboxStrategy,\n});\n\nconst textFill = new Fill({\n    color: '#fff',\n});\nconst textStroke = new Stroke({\n    color: 'rgba(0, 0, 0, 0.6)',\n    width: 3,\n});\n\nfunction createStyle(feature) {\n    return new Style({\n        image: new CircleStyle({\n            radius: 5 + feature.get('rank_min'),\n            fill: new Fill({\n                color: [255, 153, 0, 0.8],\n            }),\n        }),\n        text: new Text({\n            text: feature.get('name'),\n            fill: textFill,\n            stroke: textStroke,\n        }),\n    });\n}\n\nconst layers = [\n    new TileLayer({\n        source: new OSM(),\n        className: 'bw',\n    }),\n    new VectorLayer({\n        style: createStyle,\n        source: vectorSource\n    }),\n];\n\nconst map = new Map({\n    layers: layers,\n    target: 'map',\n    view: new View({\n        center: [2975862.75916499, 8046369.8646329],\n        zoom: 5,\n    }),\n});\n</code></pre> wfs.map wfs.map<pre><code>MAP\n    NAME \"WFS\"\n    EXTENT -180 -90 180 90\n    SIZE 400 400 #\n    PROJECTION\n        \"init=epsg:4326\"\n    END\n\n    OUTPUTFORMAT\n        NAME \"geojson\"\n        DRIVER \"OGR/GEOJSON\"\n        MIMETYPE \"application/json; subtype=geojson; charset=utf-8\"\n        FORMATOPTION \"FORM=SIMPLE\"\n        FORMATOPTION \"STORAGE=memory\"\n        FORMATOPTION \"LCO:NATIVE_MEDIA_TYPE=application/vnd.geo+json\"\n        FORMATOPTION \"USE_FEATUREID=true\" # ensure GeoJSON output has an id property\n    END\n\n    WEB\n        METADATA\n            \"ows_enable_request\" \"*\" # this enables all OGC requests\n            \"wfs_getfeature_formatlist\" \"geojson\"\n            \"wfs_srs\" \"EPSG:4326 EPSG:3857\"\n            \"ows_onlineresource\" \"http://localhost:7000/\"\n        END\n    END\n    LAYER\n        NAME \"places\"\n        TYPE POINT\n        PROJECTION\n            \"init=epsg:4326\"\n        END\n        EXTENT -180.0 -90.0 180.0 90\n        STATUS OFF\n        METADATA\n            \"gml_featureid\" \"ne_id\"\n            \"gml_include_items\" \"all\"\n            \"gml_types\" \"auto\"\n        END\n        FILTER ([pop_max] &gt; 1000000) # only return places with a population &gt; 1 million\n        CONNECTIONTYPE OGR\n        CONNECTION \"data/naturalearth\"\n        DATA \"ne_50m_populated_places_simple\"\n        CLASS\n            STYLE\n                COLOR 60 179 113\n                OUTLINECOLOR 255 255 255\n                OUTLINEWIDTH 0.1\n            END\n        END\n    END\nEND\n</code></pre>"},{"location":"outputs/wfs/#exercises","title":"Exercises","text":"<ol> <li>Change the <code>MAP</code> and <code>LAYER</code> WFS metadata, and view the GetCapabilities document.</li> <li>Try limiting the <code>gml_include_items</code> to a single attribute <code>name</code>.</li> <li> <p>Try adding a new <code>shapezip</code> <code>OUTPUTFORMAT</code>, and testing the response on the command line. You can redirect it to a file using <code>&gt; test.zip</code>. Remember to add the format to <code>wfs_getfeature_formatlist</code> in the Mapfile, and to <code>outputFormat</code> in the request string.</p> <pre><code>OUTPUTFORMAT\n    NAME \"shapezip\"\n    DRIVER \"OGR/ESRI Shapefile\"\n    FORMATOPTION \"STORAGE=filesystem\"\n    FORMATOPTION \"FORM=zip\"\n    FORMATOPTION \"LCO:SPATIAL_INDEX=YES\"\n    FORMATOPTION \"LCO:RESIZE=YES\"\nEND\n</code></pre> </li> </ol>"},{"location":"outputs/wms/","title":"Web Map Services","text":""},{"location":"outputs/wms/#overview","title":"Overview","text":"<p>We've been using WMS for interacting with MapServer for Mapfile examples. In this exercise we'll look in more detail at how to configure WMS services in MapServer.</p> <p>The MapServer WMS documentation is available here. </p>"},{"location":"outputs/wms/#metadata-blocks","title":"METADATA Blocks","text":"<p>Web services are configured using <code>METADATA</code> blocks. These are key-value pairs, for example: <code>\"wms_title\" \"My WMS Services\"</code>.</p> <p>Tip</p> <p>It is good practice to put the key names in quotes. This is not required, but it makes it clearer that they are strings and not Mapfile keywords. Keys can also contain strings such as field names, which could contain spaces. Without quotes these will cause syntax errors in the Mapfile.</p> <p>Prefixes are used to configure different types of web service. For example:</p> <ul> <li><code>wms_</code> is used for WMS services, for example <code>\"wms_title\"</code> can be set in the <code>WEB</code> <code>METADATA</code> block to set the title of the WMS service. This will be seen when read with client applications such as QGIS. </li> <li><code>wfs_</code> is used for Web Feature Services.</li> <li><code>oga_</code> is used for the new OGC API - Features. </li> </ul> <p>Tip</p> <p>If settings are to be used for multiple services, then rather than duplicating values for <code>wms_</code>, <code>wfs_</code> etc. you can use the <code>ows_</code> prefix and these settings will apply to all open web services. You can still override this top-level setting for individual service types if needed.</p> <pre><code>METADATA\n    \"ows_title\" \"My Services\" # this will apply to WFS GetCapabilities requests\n    \"wms_title\" \"My WMS Services\" # this will apply to WMS GetCapabilities requests\nEND\n</code></pre>"},{"location":"outputs/wms/#wms-request-types","title":"WMS Request Types","text":"<p>There are several different types of WMS request. </p> <ul> <li><code>GetMap</code> - for returning map images</li> <li><code>GetLegendGraphic</code> for returning legend images</li> <li><code>GetCapabilities</code> for returning XML metadata of the WMS</li> <li><code>GetFeatureInfo</code> - for returning feature attributes at a query location</li> <li><code>DescribeLayer</code> - returns an XML description of the WMS layer(s)</li> </ul> <p>More details are in the documentation. </p>"},{"location":"outputs/wms/#getlegendgraphic","title":"GetLegendGraphic","text":"<p>A sample request for the legend for the <code>polygons.map</code> is as follows:</p> <ul> <li>http://localhost:7000/?map=/etc/mapserver/polygons.map&amp;service=wms&amp;version=1.3.0&amp;request=GetLegendGraphic&amp;layer=buildings&amp;format=image/png&amp;SLD_VERSION=1.1.0</li> </ul> <p>Tip</p> <p>The names applied to the legends are based on the <code>CLASS</code> <code>NAME</code> in the Mapfile. If this is not set then no legend image is created for that layer.</p>"},{"location":"outputs/wms/#exercises","title":"Exercises","text":"<ol> <li>If you've read this far you deserve to discover one of MapServer's Easter eggs. Try changing the output format to <code>&amp;format=image/txt</code>. We'll use the <code>polygons.map</code> for the request: http://localhost:7000/?map=/etc/mapserver/polygons.map&amp;service=wms&amp;version=1.3.0&amp;request=GetMap&amp;layers=buildings&amp;format=image/txt</li> <li>Create a <code>GetLegendGraphic</code> request, but for the <code>points.map</code> for the <code>layer=poi</code>.</li> <li>Run a GetCapabilities request for the <code>polygon.map</code>.     Add various <code>METADATA</code> pairs listed in the Web Object Metadata and check its output    in the <code>GetCapabilities</code> response.</li> </ol>"}]}